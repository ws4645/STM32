
ledPwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f58  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080040f0  080040f0  000050f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d8  080042d8  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  080042d8  080042d8  000052d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e0  080042e0  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e0  080042e0  000052e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042e4  080042e4  000052e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080042e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000014  080042fc  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080042fc  00006080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089d1  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ee  00000000  00000000  0000ea15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  00010108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000755  00000000  00000000  00010a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ca4  00000000  00000000  000111e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a943  00000000  00000000  00026e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6a0  00000000  00000000  000317cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bce6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b38  00000000  00000000  000bceb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000bf9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080040d8 	.word	0x080040d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080040d8 	.word	0x080040d8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b96a 	b.w	8000e00 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	460c      	mov	r4, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d14e      	bne.n	8000bee <__udivmoddi4+0xaa>
 8000b50:	4694      	mov	ip, r2
 8000b52:	458c      	cmp	ip, r1
 8000b54:	4686      	mov	lr, r0
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	d962      	bls.n	8000c22 <__udivmoddi4+0xde>
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0320 	rsb	r3, r2, #32
 8000b62:	4091      	lsls	r1, r2
 8000b64:	fa20 f303 	lsr.w	r3, r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	4319      	orrs	r1, r3
 8000b6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b76:	fa1f f68c 	uxth.w	r6, ip
 8000b7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b82:	fb07 1114 	mls	r1, r7, r4, r1
 8000b86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8a:	fb04 f106 	mul.w	r1, r4, r6
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x64>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b9a:	f080 8112 	bcs.w	8000dc2 <__udivmoddi4+0x27e>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 810f 	bls.w	8000dc2 <__udivmoddi4+0x27e>
 8000ba4:	3c02      	subs	r4, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bba:	fb00 f606 	mul.w	r6, r0, r6
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x94>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bca:	f080 80fc 	bcs.w	8000dc6 <__udivmoddi4+0x282>
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	f240 80f9 	bls.w	8000dc6 <__udivmoddi4+0x282>
 8000bd4:	4463      	add	r3, ip
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	1b9b      	subs	r3, r3, r6
 8000bda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bde:	2100      	movs	r1, #0
 8000be0:	b11d      	cbz	r5, 8000bea <__udivmoddi4+0xa6>
 8000be2:	40d3      	lsrs	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d905      	bls.n	8000bfe <__udivmoddi4+0xba>
 8000bf2:	b10d      	cbz	r5, 8000bf8 <__udivmoddi4+0xb4>
 8000bf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e7f5      	b.n	8000bea <__udivmoddi4+0xa6>
 8000bfe:	fab3 f183 	clz	r1, r3
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d146      	bne.n	8000c94 <__udivmoddi4+0x150>
 8000c06:	42a3      	cmp	r3, r4
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xcc>
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	f0c0 80f0 	bcc.w	8000df0 <__udivmoddi4+0x2ac>
 8000c10:	1a86      	subs	r6, r0, r2
 8000c12:	eb64 0303 	sbc.w	r3, r4, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d0e6      	beq.n	8000bea <__udivmoddi4+0xa6>
 8000c1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c20:	e7e3      	b.n	8000bea <__udivmoddi4+0xa6>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	f040 8090 	bne.w	8000d48 <__udivmoddi4+0x204>
 8000c28:	eba1 040c 	sub.w	r4, r1, ip
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	fa1f f78c 	uxth.w	r7, ip
 8000c34:	2101      	movs	r1, #1
 8000c36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c46:	fb07 f006 	mul.w	r0, r7, r6
 8000c4a:	4298      	cmp	r0, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x11c>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x11a>
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2b4>
 8000c5e:	4626      	mov	r6, r4
 8000c60:	1a1c      	subs	r4, r3, r0
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb00 f707 	mul.w	r7, r0, r7
 8000c76:	429f      	cmp	r7, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x148>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x146>
 8000c84:	429f      	cmp	r7, r3
 8000c86:	f200 80b0 	bhi.w	8000dea <__udivmoddi4+0x2a6>
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	1bdb      	subs	r3, r3, r7
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	e7a5      	b.n	8000be0 <__udivmoddi4+0x9c>
 8000c94:	f1c1 0620 	rsb	r6, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c9e:	431f      	orrs	r7, r3
 8000ca0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ca4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca8:	ea43 030c 	orr.w	r3, r3, ip
 8000cac:	40f4      	lsrs	r4, r6
 8000cae:	fa00 f801 	lsl.w	r8, r0, r1
 8000cb2:	0c38      	lsrs	r0, r7, #16
 8000cb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ccc:	45a1      	cmp	r9, r4
 8000cce:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x1a6>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cda:	f080 8084 	bcs.w	8000de6 <__udivmoddi4+0x2a2>
 8000cde:	45a1      	cmp	r9, r4
 8000ce0:	f240 8081 	bls.w	8000de6 <__udivmoddi4+0x2a2>
 8000ce4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce8:	443c      	add	r4, r7
 8000cea:	eba4 0409 	sub.w	r4, r4, r9
 8000cee:	fa1f f983 	uxth.w	r9, r3
 8000cf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d02:	45a4      	cmp	ip, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x1d2>
 8000d06:	193c      	adds	r4, r7, r4
 8000d08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d0c:	d267      	bcs.n	8000dde <__udivmoddi4+0x29a>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	d965      	bls.n	8000dde <__udivmoddi4+0x29a>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d1e:	eba4 040c 	sub.w	r4, r4, ip
 8000d22:	429c      	cmp	r4, r3
 8000d24:	46ce      	mov	lr, r9
 8000d26:	469c      	mov	ip, r3
 8000d28:	d351      	bcc.n	8000dce <__udivmoddi4+0x28a>
 8000d2a:	d04e      	beq.n	8000dca <__udivmoddi4+0x286>
 8000d2c:	b155      	cbz	r5, 8000d44 <__udivmoddi4+0x200>
 8000d2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d32:	eb64 040c 	sbc.w	r4, r4, ip
 8000d36:	fa04 f606 	lsl.w	r6, r4, r6
 8000d3a:	40cb      	lsrs	r3, r1
 8000d3c:	431e      	orrs	r6, r3
 8000d3e:	40cc      	lsrs	r4, r1
 8000d40:	e9c5 6400 	strd	r6, r4, [r5]
 8000d44:	2100      	movs	r1, #0
 8000d46:	e750      	b.n	8000bea <__udivmoddi4+0xa6>
 8000d48:	f1c2 0320 	rsb	r3, r2, #32
 8000d4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d54:	fa24 f303 	lsr.w	r3, r4, r3
 8000d58:	4094      	lsls	r4, r2
 8000d5a:	430c      	orrs	r4, r1
 8000d5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d76:	fb00 f107 	mul.w	r1, r0, r7
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x24c>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d86:	d22c      	bcs.n	8000de2 <__udivmoddi4+0x29e>
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d92a      	bls.n	8000de2 <__udivmoddi4+0x29e>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	4463      	add	r3, ip
 8000d90:	1a5b      	subs	r3, r3, r1
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da0:	fb01 f307 	mul.w	r3, r1, r7
 8000da4:	42a3      	cmp	r3, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x276>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000db0:	d213      	bcs.n	8000dda <__udivmoddi4+0x296>
 8000db2:	42a3      	cmp	r3, r4
 8000db4:	d911      	bls.n	8000dda <__udivmoddi4+0x296>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4464      	add	r4, ip
 8000dba:	1ae4      	subs	r4, r4, r3
 8000dbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dc0:	e739      	b.n	8000c36 <__udivmoddi4+0xf2>
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	e6f0      	b.n	8000ba8 <__udivmoddi4+0x64>
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	e706      	b.n	8000bd8 <__udivmoddi4+0x94>
 8000dca:	45c8      	cmp	r8, r9
 8000dcc:	d2ae      	bcs.n	8000d2c <__udivmoddi4+0x1e8>
 8000dce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dd6:	3801      	subs	r0, #1
 8000dd8:	e7a8      	b.n	8000d2c <__udivmoddi4+0x1e8>
 8000dda:	4631      	mov	r1, r6
 8000ddc:	e7ed      	b.n	8000dba <__udivmoddi4+0x276>
 8000dde:	4603      	mov	r3, r0
 8000de0:	e799      	b.n	8000d16 <__udivmoddi4+0x1d2>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e7d4      	b.n	8000d90 <__udivmoddi4+0x24c>
 8000de6:	46d6      	mov	lr, sl
 8000de8:	e77f      	b.n	8000cea <__udivmoddi4+0x1a6>
 8000dea:	4463      	add	r3, ip
 8000dec:	3802      	subs	r0, #2
 8000dee:	e74d      	b.n	8000c8c <__udivmoddi4+0x148>
 8000df0:	4606      	mov	r6, r0
 8000df2:	4623      	mov	r3, r4
 8000df4:	4608      	mov	r0, r1
 8000df6:	e70f      	b.n	8000c18 <__udivmoddi4+0xd4>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	e730      	b.n	8000c60 <__udivmoddi4+0x11c>
 8000dfe:	bf00      	nop

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <setDuty>:

// 장치 선언
extern TIM_HandleTypeDef htim1;

// time1의 duty 변경
void setDuty(uint8_t duty_r, uint8_t duty_g, uint8_t duty_b){
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	71bb      	strb	r3, [r7, #6]
 8000e12:	4613      	mov	r3, r2
 8000e14:	717b      	strb	r3, [r7, #5]
	htim1.Instance->CCR1 = (duty_r) * 10;
 8000e16:	79fa      	ldrb	r2, [r7, #7]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <setDuty+0x54>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance->CCR2 = (duty_g) * 10;
 8000e28:	79ba      	ldrb	r2, [r7, #6]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <setDuty+0x54>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.Instance->CCR3 = (duty_b) * 10;
 8000e3a:	797a      	ldrb	r2, [r7, #5]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <setDuty+0x54>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	20000034 	.word	0x20000034
 8000e5c:	00000000 	.word	0x00000000

08000e60 <app>:

void app(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	// 타이머 장치 시작
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000e66:	2100      	movs	r1, #0
 8000e68:	487b      	ldr	r0, [pc, #492]	@ (8001058 <app+0x1f8>)
 8000e6a:	f001 fb07 	bl	800247c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000e6e:	2104      	movs	r1, #4
 8000e70:	4879      	ldr	r0, [pc, #484]	@ (8001058 <app+0x1f8>)
 8000e72:	f001 fb03 	bl	800247c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000e76:	2108      	movs	r1, #8
 8000e78:	4877      	ldr	r0, [pc, #476]	@ (8001058 <app+0x1f8>)
 8000e7a:	f001 faff 	bl	800247c <HAL_TIM_PWM_Start>

	while(1){
		static int angleR = 0;
		static int angleG = 120;
		static int angleB = 240;
		angleR++;
 8000e7e:	4b77      	ldr	r3, [pc, #476]	@ (800105c <app+0x1fc>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	4a75      	ldr	r2, [pc, #468]	@ (800105c <app+0x1fc>)
 8000e86:	6013      	str	r3, [r2, #0]
		angleG++;
 8000e88:	4b75      	ldr	r3, [pc, #468]	@ (8001060 <app+0x200>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4a74      	ldr	r2, [pc, #464]	@ (8001060 <app+0x200>)
 8000e90:	6013      	str	r3, [r2, #0]
		angleB++;
 8000e92:	4b74      	ldr	r3, [pc, #464]	@ (8001064 <app+0x204>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	4a72      	ldr	r2, [pc, #456]	@ (8001064 <app+0x204>)
 8000e9a:	6013      	str	r3, [r2, #0]
		angleR %= 360;
 8000e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800105c <app+0x1fc>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a71      	ldr	r2, [pc, #452]	@ (8001068 <app+0x208>)
 8000ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea6:	441a      	add	r2, r3
 8000ea8:	1211      	asrs	r1, r2, #8
 8000eaa:	17da      	asrs	r2, r3, #31
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000eb2:	fb01 f202 	mul.w	r2, r1, r2
 8000eb6:	1a9a      	subs	r2, r3, r2
 8000eb8:	4b68      	ldr	r3, [pc, #416]	@ (800105c <app+0x1fc>)
 8000eba:	601a      	str	r2, [r3, #0]
		angleG %= 360;
 8000ebc:	4b68      	ldr	r3, [pc, #416]	@ (8001060 <app+0x200>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a69      	ldr	r2, [pc, #420]	@ (8001068 <app+0x208>)
 8000ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec6:	441a      	add	r2, r3
 8000ec8:	1211      	asrs	r1, r2, #8
 8000eca:	17da      	asrs	r2, r3, #31
 8000ecc:	1a8a      	subs	r2, r1, r2
 8000ece:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000ed2:	fb01 f202 	mul.w	r2, r1, r2
 8000ed6:	1a9a      	subs	r2, r3, r2
 8000ed8:	4b61      	ldr	r3, [pc, #388]	@ (8001060 <app+0x200>)
 8000eda:	601a      	str	r2, [r3, #0]
		angleB %= 360;
 8000edc:	4b61      	ldr	r3, [pc, #388]	@ (8001064 <app+0x204>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a61      	ldr	r2, [pc, #388]	@ (8001068 <app+0x208>)
 8000ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee6:	441a      	add	r2, r3
 8000ee8:	1211      	asrs	r1, r2, #8
 8000eea:	17da      	asrs	r2, r3, #31
 8000eec:	1a8a      	subs	r2, r1, r2
 8000eee:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000ef2:	fb01 f202 	mul.w	r2, r1, r2
 8000ef6:	1a9a      	subs	r2, r3, r2
 8000ef8:	4b5a      	ldr	r3, [pc, #360]	@ (8001064 <app+0x204>)
 8000efa:	601a      	str	r2, [r3, #0]
		uint8_t valueR = sin(angleR * M_PI / 180) * 50 + 49;
 8000efc:	4b57      	ldr	r3, [pc, #348]	@ (800105c <app+0x1fc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fabb 	bl	800047c <__aeabi_i2d>
 8000f06:	a352      	add	r3, pc, #328	@ (adr r3, 8001050 <app+0x1f0>)
 8000f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0c:	f7ff fb20 	bl	8000550 <__aeabi_dmul>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4610      	mov	r0, r2
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	4b53      	ldr	r3, [pc, #332]	@ (800106c <app+0x20c>)
 8000f1e:	f7ff fc41 	bl	80007a4 <__aeabi_ddiv>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	ec43 2b17 	vmov	d7, r2, r3
 8000f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f2e:	eef0 0a67 	vmov.f32	s1, s15
 8000f32:	f002 f8a1 	bl	8003078 <sin>
 8000f36:	ec51 0b10 	vmov	r0, r1, d0
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8001070 <app+0x210>)
 8000f40:	f7ff fb06 	bl	8000550 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	4b48      	ldr	r3, [pc, #288]	@ (8001074 <app+0x214>)
 8000f52:	f7ff f947 	bl	80001e4 <__adddf3>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f7ff fdb9 	bl	8000ad4 <__aeabi_d2uiz>
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
		uint8_t valueG = sin(angleG * M_PI / 180) * 50 + 49;
 8000f66:	4b3e      	ldr	r3, [pc, #248]	@ (8001060 <app+0x200>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fa86 	bl	800047c <__aeabi_i2d>
 8000f70:	a337      	add	r3, pc, #220	@ (adr r3, 8001050 <app+0x1f0>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f7ff faeb 	bl	8000550 <__aeabi_dmul>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	4b39      	ldr	r3, [pc, #228]	@ (800106c <app+0x20c>)
 8000f88:	f7ff fc0c 	bl	80007a4 <__aeabi_ddiv>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	ec43 2b17 	vmov	d7, r2, r3
 8000f94:	eeb0 0a47 	vmov.f32	s0, s14
 8000f98:	eef0 0a67 	vmov.f32	s1, s15
 8000f9c:	f002 f86c 	bl	8003078 <sin>
 8000fa0:	ec51 0b10 	vmov	r0, r1, d0
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	4b31      	ldr	r3, [pc, #196]	@ (8001070 <app+0x210>)
 8000faa:	f7ff fad1 	bl	8000550 <__aeabi_dmul>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b2e      	ldr	r3, [pc, #184]	@ (8001074 <app+0x214>)
 8000fbc:	f7ff f912 	bl	80001e4 <__adddf3>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fd84 	bl	8000ad4 <__aeabi_d2uiz>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71bb      	strb	r3, [r7, #6]
		uint8_t valueB = sin(angleB * M_PI / 180) * 50 + 49;
 8000fd0:	4b24      	ldr	r3, [pc, #144]	@ (8001064 <app+0x204>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa51 	bl	800047c <__aeabi_i2d>
 8000fda:	a31d      	add	r3, pc, #116	@ (adr r3, 8001050 <app+0x1f0>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fab6 	bl	8000550 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <app+0x20c>)
 8000ff2:	f7ff fbd7 	bl	80007a4 <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	ec43 2b17 	vmov	d7, r2, r3
 8000ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8001002:	eef0 0a67 	vmov.f32	s1, s15
 8001006:	f002 f837 	bl	8003078 <sin>
 800100a:	ec51 0b10 	vmov	r0, r1, d0
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <app+0x210>)
 8001014:	f7ff fa9c 	bl	8000550 <__aeabi_dmul>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <app+0x214>)
 8001026:	f7ff f8dd 	bl	80001e4 <__adddf3>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fd4f 	bl	8000ad4 <__aeabi_d2uiz>
 8001036:	4603      	mov	r3, r0
 8001038:	717b      	strb	r3, [r7, #5]
		setDuty(valueR, valueG, valueB);
 800103a:	797a      	ldrb	r2, [r7, #5]
 800103c:	79b9      	ldrb	r1, [r7, #6]
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fedf 	bl	8000e04 <setDuty>
		HAL_Delay(10);
 8001046:	200a      	movs	r0, #10
 8001048:	f000 fabe 	bl	80015c8 <HAL_Delay>
	while(1){
 800104c:	bf00      	nop
 800104e:	e716      	b.n	8000e7e <app+0x1e>
 8001050:	54442d18 	.word	0x54442d18
 8001054:	400921fb 	.word	0x400921fb
 8001058:	20000034 	.word	0x20000034
 800105c:	20000030 	.word	0x20000030
 8001060:	20000000 	.word	0x20000000
 8001064:	20000004 	.word	0x20000004
 8001068:	b60b60b7 	.word	0xb60b60b7
 800106c:	40668000 	.word	0x40668000
 8001070:	40490000 	.word	0x40490000
 8001074:	40488000 	.word	0x40488000

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f000 fa32 	bl	80014e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f808 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 f91e 	bl	80012c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001088:	f000 f862 	bl	8001150 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  app();
 800108c:	f7ff fee8 	bl	8000e60 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <main+0x18>

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	@ 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2230      	movs	r2, #48	@ 0x30
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 ffbc 	bl	8003020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <SystemClock_Config+0xb4>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	4a21      	ldr	r2, [pc, #132]	@ (8001148 <SystemClock_Config+0xb4>)
 80010c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <SystemClock_Config+0xb4>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <SystemClock_Config+0xb8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <SystemClock_Config+0xb8>)
 80010de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <SystemClock_Config+0xb8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f0:	2302      	movs	r3, #2
 80010f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f8:	2310      	movs	r3, #16
 80010fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	f107 0320 	add.w	r3, r7, #32
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fced 	bl	8001ae4 <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001110:	f000 f8f2 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f000 ff50 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800113a:	f000 f8dd 	bl	80012f8 <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3750      	adds	r7, #80	@ 0x50
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b096      	sub	sp, #88	@ 0x58
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2220      	movs	r2, #32
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f001 ff49 	bl	8003020 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800118e:	4b4b      	ldr	r3, [pc, #300]	@ (80012bc <MX_TIM1_Init+0x16c>)
 8001190:	4a4b      	ldr	r2, [pc, #300]	@ (80012c0 <MX_TIM1_Init+0x170>)
 8001192:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001194:	4b49      	ldr	r3, [pc, #292]	@ (80012bc <MX_TIM1_Init+0x16c>)
 8001196:	220f      	movs	r2, #15
 8001198:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b48      	ldr	r3, [pc, #288]	@ (80012bc <MX_TIM1_Init+0x16c>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80011a0:	4b46      	ldr	r3, [pc, #280]	@ (80012bc <MX_TIM1_Init+0x16c>)
 80011a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b44      	ldr	r3, [pc, #272]	@ (80012bc <MX_TIM1_Init+0x16c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ae:	4b43      	ldr	r3, [pc, #268]	@ (80012bc <MX_TIM1_Init+0x16c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b41      	ldr	r3, [pc, #260]	@ (80012bc <MX_TIM1_Init+0x16c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ba:	4840      	ldr	r0, [pc, #256]	@ (80012bc <MX_TIM1_Init+0x16c>)
 80011bc:	f001 f8b6 	bl	800232c <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011c6:	f000 f897 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011d4:	4619      	mov	r1, r3
 80011d6:	4839      	ldr	r0, [pc, #228]	@ (80012bc <MX_TIM1_Init+0x16c>)
 80011d8:	f001 fac2 	bl	8002760 <HAL_TIM_ConfigClockSource>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011e2:	f000 f889 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011e6:	4835      	ldr	r0, [pc, #212]	@ (80012bc <MX_TIM1_Init+0x16c>)
 80011e8:	f001 f8ef 	bl	80023ca <HAL_TIM_PWM_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011f2:	f000 f881 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001202:	4619      	mov	r1, r3
 8001204:	482d      	ldr	r0, [pc, #180]	@ (80012bc <MX_TIM1_Init+0x16c>)
 8001206:	f001 fe4b 	bl	8002ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001210:	f000 f872 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001214:	2360      	movs	r3, #96	@ 0x60
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500-1;
 8001218:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	4820      	ldr	r0, [pc, #128]	@ (80012bc <MX_TIM1_Init+0x16c>)
 800123c:	f001 f9ce 	bl	80025dc <HAL_TIM_PWM_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001246:	f000 f857 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800124a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800124e:	2204      	movs	r2, #4
 8001250:	4619      	mov	r1, r3
 8001252:	481a      	ldr	r0, [pc, #104]	@ (80012bc <MX_TIM1_Init+0x16c>)
 8001254:	f001 f9c2 	bl	80025dc <HAL_TIM_PWM_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800125e:	f000 f84b 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001266:	2208      	movs	r2, #8
 8001268:	4619      	mov	r1, r3
 800126a:	4814      	ldr	r0, [pc, #80]	@ (80012bc <MX_TIM1_Init+0x16c>)
 800126c:	f001 f9b6 	bl	80025dc <HAL_TIM_PWM_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001276:	f000 f83f 	bl	80012f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800128e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001292:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	4807      	ldr	r0, [pc, #28]	@ (80012bc <MX_TIM1_Init+0x16c>)
 800129e:	f001 fe6d 	bl	8002f7c <HAL_TIMEx_ConfigBreakDeadTime>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80012a8:	f000 f826 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012ac:	4803      	ldr	r0, [pc, #12]	@ (80012bc <MX_TIM1_Init+0x16c>)
 80012ae:	f000 f873 	bl	8001398 <HAL_TIM_MspPostInit>

}
 80012b2:	bf00      	nop
 80012b4:	3758      	adds	r7, #88	@ 0x58
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000034 	.word	0x20000034
 80012c0:	40010000 	.word	0x40010000

080012c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <MX_GPIO_Init+0x30>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <MX_GPIO_Init+0x30>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <MX_GPIO_Init+0x30>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <Error_Handler+0x8>

08001304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	4a0f      	ldr	r2, [pc, #60]	@ (8001350 <HAL_MspInit+0x4c>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001318:	6453      	str	r3, [r2, #68]	@ 0x44
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <HAL_MspInit+0x4c>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	@ 0x40
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <HAL_TIM_Base_MspInit+0x3c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10d      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_TIM_Base_MspInit+0x40>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_TIM_Base_MspInit+0x40>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6453      	str	r3, [r2, #68]	@ 0x44
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <HAL_TIM_Base_MspInit+0x40>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40010000 	.word	0x40010000
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <HAL_TIM_MspPostInit+0x68>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d11e      	bne.n	80013f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_TIM_MspPostInit+0x6c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a10      	ldr	r2, [pc, #64]	@ (8001404 <HAL_TIM_MspPostInit+0x6c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <HAL_TIM_MspPostInit+0x6c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80013d6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80013da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	4805      	ldr	r0, [pc, #20]	@ (8001408 <HAL_TIM_MspPostInit+0x70>)
 80013f4:	f000 f9f2 	bl	80017dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40010000 	.word	0x40010000
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <NMI_Handler+0x4>

08001414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <MemManage_Handler+0x4>

08001424 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <UsageFault_Handler+0x4>

08001434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001462:	f000 f891 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	@ (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001494:	f7ff ffea 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	@ (80014d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	@ (80014d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	@ (80014dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014be:	f001 fdb7 	bl	8003030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7ff fdd9 	bl	8001078 <main>
  bx  lr    
 80014c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80014d4:	080042e8 	.word	0x080042e8
  ldr r2, =_sbss
 80014d8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80014dc:	20000080 	.word	0x20000080

080014e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <HAL_Init+0x40>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001524 <HAL_Init+0x40>)
 80014ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <HAL_Init+0x40>)
 80014fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	@ (8001524 <HAL_Init+0x40>)
 8001506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800150a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f931 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001512:	200f      	movs	r0, #15
 8001514:	f000 f808 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001518:	f7ff fef4 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023c00 	.word	0x40023c00

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_InitTick+0x54>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_InitTick+0x58>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800153e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f93b 	bl	80017c2 <HAL_SYSTICK_Config>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00e      	b.n	8001574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d80a      	bhi.n	8001572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f000 f911 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4a06      	ldr	r2, [pc, #24]	@ (8001584 <HAL_InitTick+0x5c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000008 	.word	0x20000008
 8001580:	20000010 	.word	0x20000010
 8001584:	2000000c 	.word	0x2000000c

08001588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_IncTick+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_IncTick+0x24>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <HAL_IncTick+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000010 	.word	0x20000010
 80015ac:	2000007c 	.word	0x2000007c

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	2000007c 	.word	0x2000007c

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffde 	bl	80015b0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000010 	.word	0x20000010

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	@ (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	@ (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	@ 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	@ 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff8e 	bl	8001674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff47 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5c 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff8e 	bl	80016c8 <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5d 	bl	8001674 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb0 	bl	8001730 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	e159      	b.n	8001aac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f8:	2201      	movs	r2, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	429a      	cmp	r2, r3
 8001812:	f040 8148 	bne.w	8001aa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b01      	cmp	r3, #1
 8001820:	d005      	beq.n	800182e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182a:	2b02      	cmp	r3, #2
 800182c:	d130      	bne.n	8001890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 0201 	and.w	r2, r3, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b03      	cmp	r3, #3
 800189a:	d017      	beq.n	80018cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d123      	bne.n	8001920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	08da      	lsrs	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3208      	adds	r2, #8
 800191a:	69b9      	ldr	r1, [r7, #24]
 800191c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0203 	and.w	r2, r3, #3
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a2 	beq.w	8001aa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b57      	ldr	r3, [pc, #348]	@ (8001ac4 <HAL_GPIO_Init+0x2e8>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	4a56      	ldr	r2, [pc, #344]	@ (8001ac4 <HAL_GPIO_Init+0x2e8>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001970:	6453      	str	r3, [r2, #68]	@ 0x44
 8001972:	4b54      	ldr	r3, [pc, #336]	@ (8001ac4 <HAL_GPIO_Init+0x2e8>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197e:	4a52      	ldr	r2, [pc, #328]	@ (8001ac8 <HAL_GPIO_Init+0x2ec>)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a49      	ldr	r2, [pc, #292]	@ (8001acc <HAL_GPIO_Init+0x2f0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d019      	beq.n	80019de <HAL_GPIO_Init+0x202>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a48      	ldr	r2, [pc, #288]	@ (8001ad0 <HAL_GPIO_Init+0x2f4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <HAL_GPIO_Init+0x1fe>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a47      	ldr	r2, [pc, #284]	@ (8001ad4 <HAL_GPIO_Init+0x2f8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00d      	beq.n	80019d6 <HAL_GPIO_Init+0x1fa>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a46      	ldr	r2, [pc, #280]	@ (8001ad8 <HAL_GPIO_Init+0x2fc>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d007      	beq.n	80019d2 <HAL_GPIO_Init+0x1f6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a45      	ldr	r2, [pc, #276]	@ (8001adc <HAL_GPIO_Init+0x300>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_GPIO_Init+0x1f2>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e008      	b.n	80019e0 <HAL_GPIO_Init+0x204>
 80019ce:	2307      	movs	r3, #7
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x204>
 80019d2:	2303      	movs	r3, #3
 80019d4:	e004      	b.n	80019e0 <HAL_GPIO_Init+0x204>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_Init+0x204>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_GPIO_Init+0x204>
 80019de:	2300      	movs	r3, #0
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	f002 0203 	and.w	r2, r2, #3
 80019e6:	0092      	lsls	r2, r2, #2
 80019e8:	4093      	lsls	r3, r2
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f0:	4935      	ldr	r1, [pc, #212]	@ (8001ac8 <HAL_GPIO_Init+0x2ec>)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fe:	4b38      	ldr	r3, [pc, #224]	@ (8001ae0 <HAL_GPIO_Init+0x304>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a22:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae0 <HAL_GPIO_Init+0x304>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a28:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae0 <HAL_GPIO_Init+0x304>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a4c:	4a24      	ldr	r2, [pc, #144]	@ (8001ae0 <HAL_GPIO_Init+0x304>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a52:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <HAL_GPIO_Init+0x304>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a76:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae0 <HAL_GPIO_Init+0x304>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <HAL_GPIO_Init+0x304>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae0 <HAL_GPIO_Init+0x304>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	f67f aea2 	bls.w	80017f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3724      	adds	r7, #36	@ 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	40020c00 	.word	0x40020c00
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40013c00 	.word	0x40013c00

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e267      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d075      	beq.n	8001bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b02:	4b88      	ldr	r3, [pc, #544]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d00c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0e:	4b85      	ldr	r3, [pc, #532]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d112      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1a:	4b82      	ldr	r3, [pc, #520]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b26:	d10b      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	4b7e      	ldr	r3, [pc, #504]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d05b      	beq.n	8001bec <HAL_RCC_OscConfig+0x108>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d157      	bne.n	8001bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e242      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b48:	d106      	bne.n	8001b58 <HAL_RCC_OscConfig+0x74>
 8001b4a:	4b76      	ldr	r3, [pc, #472]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a75      	ldr	r2, [pc, #468]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e01d      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x98>
 8001b62:	4b70      	ldr	r3, [pc, #448]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6f      	ldr	r2, [pc, #444]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6c      	ldr	r2, [pc, #432]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b7c:	4b69      	ldr	r3, [pc, #420]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a68      	ldr	r2, [pc, #416]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b66      	ldr	r3, [pc, #408]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a65      	ldr	r2, [pc, #404]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fd08 	bl	80015b0 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fd04 	bl	80015b0 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	@ 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e207      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xc0>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fcf4 	bl	80015b0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fcf0 	bl	80015b0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	@ 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1f3      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	4b51      	ldr	r3, [pc, #324]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0xe8>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d063      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c06:	4b47      	ldr	r3, [pc, #284]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d11c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	4b44      	ldr	r3, [pc, #272]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d116      	bne.n	8001c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	4b41      	ldr	r3, [pc, #260]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x152>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e1c7      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b3b      	ldr	r3, [pc, #236]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4937      	ldr	r1, [pc, #220]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	e03a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c54:	4b34      	ldr	r3, [pc, #208]	@ (8001d28 <HAL_RCC_OscConfig+0x244>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fca9 	bl	80015b0 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff fca5 	bl	80015b0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e1a8      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	4b2b      	ldr	r3, [pc, #172]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b28      	ldr	r3, [pc, #160]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4925      	ldr	r1, [pc, #148]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <HAL_RCC_OscConfig+0x244>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fc88 	bl	80015b0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fc84 	bl	80015b0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e187      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d036      	beq.n	8001d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d016      	beq.n	8001d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_RCC_OscConfig+0x248>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fc68 	bl	80015b0 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fc64 	bl	80015b0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e167      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x200>
 8001d02:	e01b      	b.n	8001d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d04:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_RCC_OscConfig+0x248>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fc51 	bl	80015b0 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	e00e      	b.n	8001d30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d12:	f7ff fc4d 	bl	80015b0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d907      	bls.n	8001d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e150      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
 8001d24:	40023800 	.word	0x40023800
 8001d28:	42470000 	.word	0x42470000
 8001d2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	4b88      	ldr	r3, [pc, #544]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ea      	bne.n	8001d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 8097 	beq.w	8001e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b81      	ldr	r3, [pc, #516]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10f      	bne.n	8001d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	4a7c      	ldr	r2, [pc, #496]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	4b77      	ldr	r3, [pc, #476]	@ (8001f58 <HAL_RCC_OscConfig+0x474>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d118      	bne.n	8001db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d86:	4b74      	ldr	r3, [pc, #464]	@ (8001f58 <HAL_RCC_OscConfig+0x474>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a73      	ldr	r2, [pc, #460]	@ (8001f58 <HAL_RCC_OscConfig+0x474>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d92:	f7ff fc0d 	bl	80015b0 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9a:	f7ff fc09 	bl	80015b0 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e10c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	4b6a      	ldr	r3, [pc, #424]	@ (8001f58 <HAL_RCC_OscConfig+0x474>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x2ea>
 8001dc0:	4b64      	ldr	r3, [pc, #400]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc4:	4a63      	ldr	r2, [pc, #396]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dcc:	e01c      	b.n	8001e08 <HAL_RCC_OscConfig+0x324>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x30c>
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dda:	4a5e      	ldr	r2, [pc, #376]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de2:	4b5c      	ldr	r3, [pc, #368]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0x324>
 8001df0:	4b58      	ldr	r3, [pc, #352]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df4:	4a57      	ldr	r2, [pc, #348]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dfc:	4b55      	ldr	r3, [pc, #340]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e00:	4a54      	ldr	r2, [pc, #336]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e02:	f023 0304 	bic.w	r3, r3, #4
 8001e06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d015      	beq.n	8001e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e10:	f7ff fbce 	bl	80015b0 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e18:	f7ff fbca 	bl	80015b0 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e0cb      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2e:	4b49      	ldr	r3, [pc, #292]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0ee      	beq.n	8001e18 <HAL_RCC_OscConfig+0x334>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fbb8 	bl	80015b0 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7ff fbb4 	bl	80015b0 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e0b5      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ee      	bne.n	8001e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6c:	4b39      	ldr	r3, [pc, #228]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	4a38      	ldr	r2, [pc, #224]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80a1 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e82:	4b34      	ldr	r3, [pc, #208]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d05c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d141      	bne.n	8001f1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b31      	ldr	r3, [pc, #196]	@ (8001f5c <HAL_RCC_OscConfig+0x478>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fb88 	bl	80015b0 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff fb84 	bl	80015b0 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e087      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	4b27      	ldr	r3, [pc, #156]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	019b      	lsls	r3, r3, #6
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	3b01      	subs	r3, #1
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	491b      	ldr	r1, [pc, #108]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eec:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <HAL_RCC_OscConfig+0x478>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fb5d 	bl	80015b0 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7ff fb59 	bl	80015b0 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e05c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x416>
 8001f18:	e054      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <HAL_RCC_OscConfig+0x478>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fb46 	bl	80015b0 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7ff fb42 	bl	80015b0 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e045      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x444>
 8001f46:	e03d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e038      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <HAL_RCC_OscConfig+0x4ec>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d028      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d121      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d11a      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d111      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0cc      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b68      	ldr	r3, [pc, #416]	@ (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d90c      	bls.n	8002010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b65      	ldr	r3, [pc, #404]	@ (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b63      	ldr	r3, [pc, #396]	@ (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002028:	4b59      	ldr	r3, [pc, #356]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a58      	ldr	r2, [pc, #352]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002032:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002040:	4b53      	ldr	r3, [pc, #332]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a52      	ldr	r2, [pc, #328]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800204a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b50      	ldr	r3, [pc, #320]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	494d      	ldr	r1, [pc, #308]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d044      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b47      	ldr	r3, [pc, #284]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d119      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e07f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208e:	2b03      	cmp	r3, #3
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b3f      	ldr	r3, [pc, #252]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e067      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b37      	ldr	r3, [pc, #220]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4934      	ldr	r1, [pc, #208]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7ff fa74 	bl	80015b0 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7ff fa70 	bl	80015b0 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e04f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b25      	ldr	r3, [pc, #148]	@ (800218c <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d20c      	bcs.n	800211c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b22      	ldr	r3, [pc, #136]	@ (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	@ (800218c <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e032      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4916      	ldr	r1, [pc, #88]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002146:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	490e      	ldr	r1, [pc, #56]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800215a:	f000 f821 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490a      	ldr	r1, [pc, #40]	@ (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a09      	ldr	r2, [pc, #36]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002176:	4b09      	ldr	r3, [pc, #36]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f9d4 	bl	8001528 <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00
 8002190:	40023800 	.word	0x40023800
 8002194:	080040f0 	.word	0x080040f0
 8002198:	20000008 	.word	0x20000008
 800219c:	2000000c 	.word	0x2000000c

080021a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021a4:	b090      	sub	sp, #64	@ 0x40
 80021a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b8:	4b59      	ldr	r3, [pc, #356]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d00d      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x40>
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	f200 80a1 	bhi.w	800230c <HAL_RCC_GetSysClockFreq+0x16c>
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x34>
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x3a>
 80021d2:	e09b      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b53      	ldr	r3, [pc, #332]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x184>)
 80021d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021d8:	e09b      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021da:	4b53      	ldr	r3, [pc, #332]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x188>)
 80021dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021de:	e098      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d028      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	2200      	movs	r2, #0
 80021fe:	623b      	str	r3, [r7, #32]
 8002200:	627a      	str	r2, [r7, #36]	@ 0x24
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002208:	2100      	movs	r1, #0
 800220a:	4b47      	ldr	r3, [pc, #284]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x188>)
 800220c:	fb03 f201 	mul.w	r2, r3, r1
 8002210:	2300      	movs	r3, #0
 8002212:	fb00 f303 	mul.w	r3, r0, r3
 8002216:	4413      	add	r3, r2
 8002218:	4a43      	ldr	r2, [pc, #268]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x188>)
 800221a:	fba0 1202 	umull	r1, r2, r0, r2
 800221e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002220:	460a      	mov	r2, r1
 8002222:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002224:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002226:	4413      	add	r3, r2
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800222a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800222c:	2200      	movs	r2, #0
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	61fa      	str	r2, [r7, #28]
 8002232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002236:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800223a:	f7fe fc6b 	bl	8000b14 <__aeabi_uldivmod>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4613      	mov	r3, r2
 8002244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002246:	e053      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002248:	4b35      	ldr	r3, [pc, #212]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	2200      	movs	r2, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	617a      	str	r2, [r7, #20]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800225a:	f04f 0b00 	mov.w	fp, #0
 800225e:	4652      	mov	r2, sl
 8002260:	465b      	mov	r3, fp
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	0159      	lsls	r1, r3, #5
 800226c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002270:	0150      	lsls	r0, r2, #5
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	ebb2 080a 	subs.w	r8, r2, sl
 800227a:	eb63 090b 	sbc.w	r9, r3, fp
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800228a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800228e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002292:	ebb2 0408 	subs.w	r4, r2, r8
 8002296:	eb63 0509 	sbc.w	r5, r3, r9
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	00eb      	lsls	r3, r5, #3
 80022a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022a8:	00e2      	lsls	r2, r4, #3
 80022aa:	4614      	mov	r4, r2
 80022ac:	461d      	mov	r5, r3
 80022ae:	eb14 030a 	adds.w	r3, r4, sl
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	eb45 030b 	adc.w	r3, r5, fp
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022c6:	4629      	mov	r1, r5
 80022c8:	028b      	lsls	r3, r1, #10
 80022ca:	4621      	mov	r1, r4
 80022cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022d0:	4621      	mov	r1, r4
 80022d2:	028a      	lsls	r2, r1, #10
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022da:	2200      	movs	r2, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	60fa      	str	r2, [r7, #12]
 80022e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022e4:	f7fe fc16 	bl	8000b14 <__aeabi_uldivmod>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4613      	mov	r3, r2
 80022ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	3301      	adds	r3, #1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002300:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x184>)
 800230e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002314:	4618      	mov	r0, r3
 8002316:	3740      	adds	r7, #64	@ 0x40
 8002318:	46bd      	mov	sp, r7
 800231a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	00f42400 	.word	0x00f42400
 8002328:	017d7840 	.word	0x017d7840

0800232c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e041      	b.n	80023c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe fffe 	bl	8001354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3304      	adds	r3, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4610      	mov	r0, r2
 800236c:	f000 fac0 	bl	80028f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e041      	b.n	8002460 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d106      	bne.n	80023f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f839 	bl	8002468 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f000 fa71 	bl	80028f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_TIM_PWM_Start+0x24>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e022      	b.n	80024e6 <HAL_TIM_PWM_Start+0x6a>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d109      	bne.n	80024ba <HAL_TIM_PWM_Start+0x3e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	bf14      	ite	ne
 80024b2:	2301      	movne	r3, #1
 80024b4:	2300      	moveq	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	e015      	b.n	80024e6 <HAL_TIM_PWM_Start+0x6a>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d109      	bne.n	80024d4 <HAL_TIM_PWM_Start+0x58>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e008      	b.n	80024e6 <HAL_TIM_PWM_Start+0x6a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e068      	b.n	80025c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d104      	bne.n	80024fe <HAL_TIM_PWM_Start+0x82>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024fc:	e013      	b.n	8002526 <HAL_TIM_PWM_Start+0xaa>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d104      	bne.n	800250e <HAL_TIM_PWM_Start+0x92>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800250c:	e00b      	b.n	8002526 <HAL_TIM_PWM_Start+0xaa>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b08      	cmp	r3, #8
 8002512:	d104      	bne.n	800251e <HAL_TIM_PWM_Start+0xa2>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800251c:	e003      	b.n	8002526 <HAL_TIM_PWM_Start+0xaa>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2201      	movs	r2, #1
 800252c:	6839      	ldr	r1, [r7, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fc90 	bl	8002e54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a23      	ldr	r2, [pc, #140]	@ (80025c8 <HAL_TIM_PWM_Start+0x14c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d107      	bne.n	800254e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800254c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1d      	ldr	r2, [pc, #116]	@ (80025c8 <HAL_TIM_PWM_Start+0x14c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d018      	beq.n	800258a <HAL_TIM_PWM_Start+0x10e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002560:	d013      	beq.n	800258a <HAL_TIM_PWM_Start+0x10e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_TIM_PWM_Start+0x150>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00e      	beq.n	800258a <HAL_TIM_PWM_Start+0x10e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a17      	ldr	r2, [pc, #92]	@ (80025d0 <HAL_TIM_PWM_Start+0x154>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_TIM_PWM_Start+0x10e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a16      	ldr	r2, [pc, #88]	@ (80025d4 <HAL_TIM_PWM_Start+0x158>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d004      	beq.n	800258a <HAL_TIM_PWM_Start+0x10e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <HAL_TIM_PWM_Start+0x15c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d111      	bne.n	80025ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b06      	cmp	r3, #6
 800259a:	d010      	beq.n	80025be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ac:	e007      	b.n	80025be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40000800 	.word	0x40000800
 80025d4:	40000c00 	.word	0x40000c00
 80025d8:	40014000 	.word	0x40014000

080025dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e0ae      	b.n	8002758 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b0c      	cmp	r3, #12
 8002606:	f200 809f 	bhi.w	8002748 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800260a:	a201      	add	r2, pc, #4	@ (adr r2, 8002610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002645 	.word	0x08002645
 8002614:	08002749 	.word	0x08002749
 8002618:	08002749 	.word	0x08002749
 800261c:	08002749 	.word	0x08002749
 8002620:	08002685 	.word	0x08002685
 8002624:	08002749 	.word	0x08002749
 8002628:	08002749 	.word	0x08002749
 800262c:	08002749 	.word	0x08002749
 8002630:	080026c7 	.word	0x080026c7
 8002634:	08002749 	.word	0x08002749
 8002638:	08002749 	.word	0x08002749
 800263c:	08002749 	.word	0x08002749
 8002640:	08002707 	.word	0x08002707
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f9dc 	bl	8002a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0208 	orr.w	r2, r2, #8
 800265e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6999      	ldr	r1, [r3, #24]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	619a      	str	r2, [r3, #24]
      break;
 8002682:	e064      	b.n	800274e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fa22 	bl	8002ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800269e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6999      	ldr	r1, [r3, #24]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	021a      	lsls	r2, r3, #8
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	619a      	str	r2, [r3, #24]
      break;
 80026c4:	e043      	b.n	800274e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fa6d 	bl	8002bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0208 	orr.w	r2, r2, #8
 80026e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0204 	bic.w	r2, r2, #4
 80026f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69d9      	ldr	r1, [r3, #28]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	61da      	str	r2, [r3, #28]
      break;
 8002704:	e023      	b.n	800274e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fab7 	bl	8002c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69da      	ldr	r2, [r3, #28]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69d9      	ldr	r1, [r3, #28]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	021a      	lsls	r2, r3, #8
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	61da      	str	r2, [r3, #28]
      break;
 8002746:	e002      	b.n	800274e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	75fb      	strb	r3, [r7, #23]
      break;
 800274c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_TIM_ConfigClockSource+0x1c>
 8002778:	2302      	movs	r3, #2
 800277a:	e0b4      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x186>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800279a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027b4:	d03e      	beq.n	8002834 <HAL_TIM_ConfigClockSource+0xd4>
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ba:	f200 8087 	bhi.w	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c2:	f000 8086 	beq.w	80028d2 <HAL_TIM_ConfigClockSource+0x172>
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ca:	d87f      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b70      	cmp	r3, #112	@ 0x70
 80027ce:	d01a      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0xa6>
 80027d0:	2b70      	cmp	r3, #112	@ 0x70
 80027d2:	d87b      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b60      	cmp	r3, #96	@ 0x60
 80027d6:	d050      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x11a>
 80027d8:	2b60      	cmp	r3, #96	@ 0x60
 80027da:	d877      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b50      	cmp	r3, #80	@ 0x50
 80027de:	d03c      	beq.n	800285a <HAL_TIM_ConfigClockSource+0xfa>
 80027e0:	2b50      	cmp	r3, #80	@ 0x50
 80027e2:	d873      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b40      	cmp	r3, #64	@ 0x40
 80027e6:	d058      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x13a>
 80027e8:	2b40      	cmp	r3, #64	@ 0x40
 80027ea:	d86f      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b30      	cmp	r3, #48	@ 0x30
 80027ee:	d064      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 80027f0:	2b30      	cmp	r3, #48	@ 0x30
 80027f2:	d86b      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d060      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d867      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d05c      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 8002800:	2b10      	cmp	r3, #16
 8002802:	d05a      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 8002804:	e062      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002816:	f000 fafd 	bl	8002e14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	609a      	str	r2, [r3, #8]
      break;
 8002832:	e04f      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002844:	f000 fae6 	bl	8002e14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002856:	609a      	str	r2, [r3, #8]
      break;
 8002858:	e03c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	461a      	mov	r2, r3
 8002868:	f000 fa5a 	bl	8002d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2150      	movs	r1, #80	@ 0x50
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fab3 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002878:	e02c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002886:	461a      	mov	r2, r3
 8002888:	f000 fa79 	bl	8002d7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2160      	movs	r1, #96	@ 0x60
 8002892:	4618      	mov	r0, r3
 8002894:	f000 faa3 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002898:	e01c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	461a      	mov	r2, r3
 80028a8:	f000 fa3a 	bl	8002d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2140      	movs	r1, #64	@ 0x40
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fa93 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 80028b8:	e00c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f000 fa8a 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 80028ca:	e003      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e000      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a3a      	ldr	r2, [pc, #232]	@ (80029ec <TIM_Base_SetConfig+0xfc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00f      	beq.n	8002928 <TIM_Base_SetConfig+0x38>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290e:	d00b      	beq.n	8002928 <TIM_Base_SetConfig+0x38>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a37      	ldr	r2, [pc, #220]	@ (80029f0 <TIM_Base_SetConfig+0x100>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_Base_SetConfig+0x38>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a36      	ldr	r2, [pc, #216]	@ (80029f4 <TIM_Base_SetConfig+0x104>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_Base_SetConfig+0x38>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a35      	ldr	r2, [pc, #212]	@ (80029f8 <TIM_Base_SetConfig+0x108>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d108      	bne.n	800293a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800292e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a2b      	ldr	r2, [pc, #172]	@ (80029ec <TIM_Base_SetConfig+0xfc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01b      	beq.n	800297a <TIM_Base_SetConfig+0x8a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002948:	d017      	beq.n	800297a <TIM_Base_SetConfig+0x8a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a28      	ldr	r2, [pc, #160]	@ (80029f0 <TIM_Base_SetConfig+0x100>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <TIM_Base_SetConfig+0x8a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a27      	ldr	r2, [pc, #156]	@ (80029f4 <TIM_Base_SetConfig+0x104>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00f      	beq.n	800297a <TIM_Base_SetConfig+0x8a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a26      	ldr	r2, [pc, #152]	@ (80029f8 <TIM_Base_SetConfig+0x108>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00b      	beq.n	800297a <TIM_Base_SetConfig+0x8a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a25      	ldr	r2, [pc, #148]	@ (80029fc <TIM_Base_SetConfig+0x10c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <TIM_Base_SetConfig+0x8a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a24      	ldr	r2, [pc, #144]	@ (8002a00 <TIM_Base_SetConfig+0x110>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d003      	beq.n	800297a <TIM_Base_SetConfig+0x8a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a23      	ldr	r2, [pc, #140]	@ (8002a04 <TIM_Base_SetConfig+0x114>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a0e      	ldr	r2, [pc, #56]	@ (80029ec <TIM_Base_SetConfig+0xfc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d103      	bne.n	80029c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d105      	bne.n	80029de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f023 0201 	bic.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]
  }
}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40010000 	.word	0x40010000
 80029f0:	40000400 	.word	0x40000400
 80029f4:	40000800 	.word	0x40000800
 80029f8:	40000c00 	.word	0x40000c00
 80029fc:	40014000 	.word	0x40014000
 8002a00:	40014400 	.word	0x40014400
 8002a04:	40014800 	.word	0x40014800

08002a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f023 0201 	bic.w	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f023 0302 	bic.w	r3, r3, #2
 8002a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad0 <TIM_OC1_SetConfig+0xc8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10c      	bne.n	8002a7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f023 0308 	bic.w	r3, r3, #8
 8002a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a13      	ldr	r2, [pc, #76]	@ (8002ad0 <TIM_OC1_SetConfig+0xc8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d111      	bne.n	8002aaa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	621a      	str	r2, [r3, #32]
}
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40010000 	.word	0x40010000

08002ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f023 0210 	bic.w	r2, r3, #16
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0320 	bic.w	r3, r3, #32
 8002b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba8 <TIM_OC2_SetConfig+0xd4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10d      	bne.n	8002b50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a15      	ldr	r2, [pc, #84]	@ (8002ba8 <TIM_OC2_SetConfig+0xd4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d113      	bne.n	8002b80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40010000 	.word	0x40010000

08002bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	@ (8002c7c <TIM_OC3_SetConfig+0xd0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d10d      	bne.n	8002c26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a14      	ldr	r2, [pc, #80]	@ (8002c7c <TIM_OC3_SetConfig+0xd0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d113      	bne.n	8002c56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	621a      	str	r2, [r3, #32]
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	40010000 	.word	0x40010000

08002c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	031b      	lsls	r3, r3, #12
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a10      	ldr	r2, [pc, #64]	@ (8002d1c <TIM_OC4_SetConfig+0x9c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d109      	bne.n	8002cf4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	019b      	lsls	r3, r3, #6
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	621a      	str	r2, [r3, #32]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010000 	.word	0x40010000

08002d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f023 0201 	bic.w	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f023 030a 	bic.w	r3, r3, #10
 8002d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b087      	sub	sp, #28
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f023 0210 	bic.w	r2, r3, #16
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	031b      	lsls	r3, r3, #12
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002dba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f043 0307 	orr.w	r3, r3, #7
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	609a      	str	r2, [r3, #8]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	021a      	lsls	r2, r3, #8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	2201      	movs	r2, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a1a      	ldr	r2, [r3, #32]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	401a      	ands	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	621a      	str	r2, [r3, #32]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e050      	b.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d018      	beq.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f04:	d013      	beq.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a18      	ldr	r2, [pc, #96]	@ (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00e      	beq.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	@ (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a15      	ldr	r2, [pc, #84]	@ (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a13      	ldr	r2, [pc, #76]	@ (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10c      	bne.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40000800 	.word	0x40000800
 8002f74:	40000c00 	.word	0x40000c00
 8002f78:	40014000 	.word	0x40014000

08002f7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e03d      	b.n	8003014 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <memset>:
 8003020:	4402      	add	r2, r0
 8003022:	4603      	mov	r3, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <__libc_init_array>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	4d0d      	ldr	r5, [pc, #52]	@ (8003068 <__libc_init_array+0x38>)
 8003034:	4c0d      	ldr	r4, [pc, #52]	@ (800306c <__libc_init_array+0x3c>)
 8003036:	1b64      	subs	r4, r4, r5
 8003038:	10a4      	asrs	r4, r4, #2
 800303a:	2600      	movs	r6, #0
 800303c:	42a6      	cmp	r6, r4
 800303e:	d109      	bne.n	8003054 <__libc_init_array+0x24>
 8003040:	4d0b      	ldr	r5, [pc, #44]	@ (8003070 <__libc_init_array+0x40>)
 8003042:	4c0c      	ldr	r4, [pc, #48]	@ (8003074 <__libc_init_array+0x44>)
 8003044:	f001 f848 	bl	80040d8 <_init>
 8003048:	1b64      	subs	r4, r4, r5
 800304a:	10a4      	asrs	r4, r4, #2
 800304c:	2600      	movs	r6, #0
 800304e:	42a6      	cmp	r6, r4
 8003050:	d105      	bne.n	800305e <__libc_init_array+0x2e>
 8003052:	bd70      	pop	{r4, r5, r6, pc}
 8003054:	f855 3b04 	ldr.w	r3, [r5], #4
 8003058:	4798      	blx	r3
 800305a:	3601      	adds	r6, #1
 800305c:	e7ee      	b.n	800303c <__libc_init_array+0xc>
 800305e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003062:	4798      	blx	r3
 8003064:	3601      	adds	r6, #1
 8003066:	e7f2      	b.n	800304e <__libc_init_array+0x1e>
 8003068:	080042e0 	.word	0x080042e0
 800306c:	080042e0 	.word	0x080042e0
 8003070:	080042e0 	.word	0x080042e0
 8003074:	080042e4 	.word	0x080042e4

08003078 <sin>:
 8003078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800307a:	ec53 2b10 	vmov	r2, r3, d0
 800307e:	4826      	ldr	r0, [pc, #152]	@ (8003118 <sin+0xa0>)
 8003080:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003084:	4281      	cmp	r1, r0
 8003086:	d807      	bhi.n	8003098 <sin+0x20>
 8003088:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003110 <sin+0x98>
 800308c:	2000      	movs	r0, #0
 800308e:	b005      	add	sp, #20
 8003090:	f85d eb04 	ldr.w	lr, [sp], #4
 8003094:	f000 b90c 	b.w	80032b0 <__kernel_sin>
 8003098:	4820      	ldr	r0, [pc, #128]	@ (800311c <sin+0xa4>)
 800309a:	4281      	cmp	r1, r0
 800309c:	d908      	bls.n	80030b0 <sin+0x38>
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	f7fd f89d 	bl	80001e0 <__aeabi_dsub>
 80030a6:	ec41 0b10 	vmov	d0, r0, r1
 80030aa:	b005      	add	sp, #20
 80030ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80030b0:	4668      	mov	r0, sp
 80030b2:	f000 f9b9 	bl	8003428 <__ieee754_rem_pio2>
 80030b6:	f000 0003 	and.w	r0, r0, #3
 80030ba:	2801      	cmp	r0, #1
 80030bc:	d00c      	beq.n	80030d8 <sin+0x60>
 80030be:	2802      	cmp	r0, #2
 80030c0:	d011      	beq.n	80030e6 <sin+0x6e>
 80030c2:	b9e8      	cbnz	r0, 8003100 <sin+0x88>
 80030c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80030c8:	ed9d 0b00 	vldr	d0, [sp]
 80030cc:	2001      	movs	r0, #1
 80030ce:	f000 f8ef 	bl	80032b0 <__kernel_sin>
 80030d2:	ec51 0b10 	vmov	r0, r1, d0
 80030d6:	e7e6      	b.n	80030a6 <sin+0x2e>
 80030d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80030dc:	ed9d 0b00 	vldr	d0, [sp]
 80030e0:	f000 f81e 	bl	8003120 <__kernel_cos>
 80030e4:	e7f5      	b.n	80030d2 <sin+0x5a>
 80030e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80030ea:	ed9d 0b00 	vldr	d0, [sp]
 80030ee:	2001      	movs	r0, #1
 80030f0:	f000 f8de 	bl	80032b0 <__kernel_sin>
 80030f4:	ec53 2b10 	vmov	r2, r3, d0
 80030f8:	4610      	mov	r0, r2
 80030fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80030fe:	e7d2      	b.n	80030a6 <sin+0x2e>
 8003100:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003104:	ed9d 0b00 	vldr	d0, [sp]
 8003108:	f000 f80a 	bl	8003120 <__kernel_cos>
 800310c:	e7f2      	b.n	80030f4 <sin+0x7c>
 800310e:	bf00      	nop
	...
 8003118:	3fe921fb 	.word	0x3fe921fb
 800311c:	7fefffff 	.word	0x7fefffff

08003120 <__kernel_cos>:
 8003120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003124:	ec57 6b10 	vmov	r6, r7, d0
 8003128:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800312c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003130:	ed8d 1b00 	vstr	d1, [sp]
 8003134:	d206      	bcs.n	8003144 <__kernel_cos+0x24>
 8003136:	4630      	mov	r0, r6
 8003138:	4639      	mov	r1, r7
 800313a:	f7fd fca3 	bl	8000a84 <__aeabi_d2iz>
 800313e:	2800      	cmp	r0, #0
 8003140:	f000 8088 	beq.w	8003254 <__kernel_cos+0x134>
 8003144:	4632      	mov	r2, r6
 8003146:	463b      	mov	r3, r7
 8003148:	4630      	mov	r0, r6
 800314a:	4639      	mov	r1, r7
 800314c:	f7fd fa00 	bl	8000550 <__aeabi_dmul>
 8003150:	4b51      	ldr	r3, [pc, #324]	@ (8003298 <__kernel_cos+0x178>)
 8003152:	2200      	movs	r2, #0
 8003154:	4604      	mov	r4, r0
 8003156:	460d      	mov	r5, r1
 8003158:	f7fd f9fa 	bl	8000550 <__aeabi_dmul>
 800315c:	a340      	add	r3, pc, #256	@ (adr r3, 8003260 <__kernel_cos+0x140>)
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	4682      	mov	sl, r0
 8003164:	468b      	mov	fp, r1
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f7fd f9f1 	bl	8000550 <__aeabi_dmul>
 800316e:	a33e      	add	r3, pc, #248	@ (adr r3, 8003268 <__kernel_cos+0x148>)
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f7fd f836 	bl	80001e4 <__adddf3>
 8003178:	4622      	mov	r2, r4
 800317a:	462b      	mov	r3, r5
 800317c:	f7fd f9e8 	bl	8000550 <__aeabi_dmul>
 8003180:	a33b      	add	r3, pc, #236	@ (adr r3, 8003270 <__kernel_cos+0x150>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f7fd f82b 	bl	80001e0 <__aeabi_dsub>
 800318a:	4622      	mov	r2, r4
 800318c:	462b      	mov	r3, r5
 800318e:	f7fd f9df 	bl	8000550 <__aeabi_dmul>
 8003192:	a339      	add	r3, pc, #228	@ (adr r3, 8003278 <__kernel_cos+0x158>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f7fd f824 	bl	80001e4 <__adddf3>
 800319c:	4622      	mov	r2, r4
 800319e:	462b      	mov	r3, r5
 80031a0:	f7fd f9d6 	bl	8000550 <__aeabi_dmul>
 80031a4:	a336      	add	r3, pc, #216	@ (adr r3, 8003280 <__kernel_cos+0x160>)
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	f7fd f819 	bl	80001e0 <__aeabi_dsub>
 80031ae:	4622      	mov	r2, r4
 80031b0:	462b      	mov	r3, r5
 80031b2:	f7fd f9cd 	bl	8000550 <__aeabi_dmul>
 80031b6:	a334      	add	r3, pc, #208	@ (adr r3, 8003288 <__kernel_cos+0x168>)
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	f7fd f812 	bl	80001e4 <__adddf3>
 80031c0:	4622      	mov	r2, r4
 80031c2:	462b      	mov	r3, r5
 80031c4:	f7fd f9c4 	bl	8000550 <__aeabi_dmul>
 80031c8:	4622      	mov	r2, r4
 80031ca:	462b      	mov	r3, r5
 80031cc:	f7fd f9c0 	bl	8000550 <__aeabi_dmul>
 80031d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80031d4:	4604      	mov	r4, r0
 80031d6:	460d      	mov	r5, r1
 80031d8:	4630      	mov	r0, r6
 80031da:	4639      	mov	r1, r7
 80031dc:	f7fd f9b8 	bl	8000550 <__aeabi_dmul>
 80031e0:	460b      	mov	r3, r1
 80031e2:	4602      	mov	r2, r0
 80031e4:	4629      	mov	r1, r5
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7fc fffa 	bl	80001e0 <__aeabi_dsub>
 80031ec:	4b2b      	ldr	r3, [pc, #172]	@ (800329c <__kernel_cos+0x17c>)
 80031ee:	4598      	cmp	r8, r3
 80031f0:	4606      	mov	r6, r0
 80031f2:	460f      	mov	r7, r1
 80031f4:	d810      	bhi.n	8003218 <__kernel_cos+0xf8>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4650      	mov	r0, sl
 80031fc:	4659      	mov	r1, fp
 80031fe:	f7fc ffef 	bl	80001e0 <__aeabi_dsub>
 8003202:	460b      	mov	r3, r1
 8003204:	4926      	ldr	r1, [pc, #152]	@ (80032a0 <__kernel_cos+0x180>)
 8003206:	4602      	mov	r2, r0
 8003208:	2000      	movs	r0, #0
 800320a:	f7fc ffe9 	bl	80001e0 <__aeabi_dsub>
 800320e:	ec41 0b10 	vmov	d0, r0, r1
 8003212:	b003      	add	sp, #12
 8003214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003218:	4b22      	ldr	r3, [pc, #136]	@ (80032a4 <__kernel_cos+0x184>)
 800321a:	4921      	ldr	r1, [pc, #132]	@ (80032a0 <__kernel_cos+0x180>)
 800321c:	4598      	cmp	r8, r3
 800321e:	bf8c      	ite	hi
 8003220:	4d21      	ldrhi	r5, [pc, #132]	@ (80032a8 <__kernel_cos+0x188>)
 8003222:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003226:	2400      	movs	r4, #0
 8003228:	4622      	mov	r2, r4
 800322a:	462b      	mov	r3, r5
 800322c:	2000      	movs	r0, #0
 800322e:	f7fc ffd7 	bl	80001e0 <__aeabi_dsub>
 8003232:	4622      	mov	r2, r4
 8003234:	4680      	mov	r8, r0
 8003236:	4689      	mov	r9, r1
 8003238:	462b      	mov	r3, r5
 800323a:	4650      	mov	r0, sl
 800323c:	4659      	mov	r1, fp
 800323e:	f7fc ffcf 	bl	80001e0 <__aeabi_dsub>
 8003242:	4632      	mov	r2, r6
 8003244:	463b      	mov	r3, r7
 8003246:	f7fc ffcb 	bl	80001e0 <__aeabi_dsub>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4640      	mov	r0, r8
 8003250:	4649      	mov	r1, r9
 8003252:	e7da      	b.n	800320a <__kernel_cos+0xea>
 8003254:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003290 <__kernel_cos+0x170>
 8003258:	e7db      	b.n	8003212 <__kernel_cos+0xf2>
 800325a:	bf00      	nop
 800325c:	f3af 8000 	nop.w
 8003260:	be8838d4 	.word	0xbe8838d4
 8003264:	bda8fae9 	.word	0xbda8fae9
 8003268:	bdb4b1c4 	.word	0xbdb4b1c4
 800326c:	3e21ee9e 	.word	0x3e21ee9e
 8003270:	809c52ad 	.word	0x809c52ad
 8003274:	3e927e4f 	.word	0x3e927e4f
 8003278:	19cb1590 	.word	0x19cb1590
 800327c:	3efa01a0 	.word	0x3efa01a0
 8003280:	16c15177 	.word	0x16c15177
 8003284:	3f56c16c 	.word	0x3f56c16c
 8003288:	5555554c 	.word	0x5555554c
 800328c:	3fa55555 	.word	0x3fa55555
 8003290:	00000000 	.word	0x00000000
 8003294:	3ff00000 	.word	0x3ff00000
 8003298:	3fe00000 	.word	0x3fe00000
 800329c:	3fd33332 	.word	0x3fd33332
 80032a0:	3ff00000 	.word	0x3ff00000
 80032a4:	3fe90000 	.word	0x3fe90000
 80032a8:	3fd20000 	.word	0x3fd20000
 80032ac:	00000000 	.word	0x00000000

080032b0 <__kernel_sin>:
 80032b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b4:	ec55 4b10 	vmov	r4, r5, d0
 80032b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80032bc:	b085      	sub	sp, #20
 80032be:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80032c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80032c6:	4680      	mov	r8, r0
 80032c8:	d205      	bcs.n	80032d6 <__kernel_sin+0x26>
 80032ca:	4620      	mov	r0, r4
 80032cc:	4629      	mov	r1, r5
 80032ce:	f7fd fbd9 	bl	8000a84 <__aeabi_d2iz>
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d052      	beq.n	800337c <__kernel_sin+0xcc>
 80032d6:	4622      	mov	r2, r4
 80032d8:	462b      	mov	r3, r5
 80032da:	4620      	mov	r0, r4
 80032dc:	4629      	mov	r1, r5
 80032de:	f7fd f937 	bl	8000550 <__aeabi_dmul>
 80032e2:	4682      	mov	sl, r0
 80032e4:	468b      	mov	fp, r1
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4620      	mov	r0, r4
 80032ec:	4629      	mov	r1, r5
 80032ee:	f7fd f92f 	bl	8000550 <__aeabi_dmul>
 80032f2:	a342      	add	r3, pc, #264	@ (adr r3, 80033fc <__kernel_sin+0x14c>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	e9cd 0100 	strd	r0, r1, [sp]
 80032fc:	4650      	mov	r0, sl
 80032fe:	4659      	mov	r1, fp
 8003300:	f7fd f926 	bl	8000550 <__aeabi_dmul>
 8003304:	a33f      	add	r3, pc, #252	@ (adr r3, 8003404 <__kernel_sin+0x154>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f7fc ff69 	bl	80001e0 <__aeabi_dsub>
 800330e:	4652      	mov	r2, sl
 8003310:	465b      	mov	r3, fp
 8003312:	f7fd f91d 	bl	8000550 <__aeabi_dmul>
 8003316:	a33d      	add	r3, pc, #244	@ (adr r3, 800340c <__kernel_sin+0x15c>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f7fc ff62 	bl	80001e4 <__adddf3>
 8003320:	4652      	mov	r2, sl
 8003322:	465b      	mov	r3, fp
 8003324:	f7fd f914 	bl	8000550 <__aeabi_dmul>
 8003328:	a33a      	add	r3, pc, #232	@ (adr r3, 8003414 <__kernel_sin+0x164>)
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f7fc ff57 	bl	80001e0 <__aeabi_dsub>
 8003332:	4652      	mov	r2, sl
 8003334:	465b      	mov	r3, fp
 8003336:	f7fd f90b 	bl	8000550 <__aeabi_dmul>
 800333a:	a338      	add	r3, pc, #224	@ (adr r3, 800341c <__kernel_sin+0x16c>)
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f7fc ff50 	bl	80001e4 <__adddf3>
 8003344:	4606      	mov	r6, r0
 8003346:	460f      	mov	r7, r1
 8003348:	f1b8 0f00 	cmp.w	r8, #0
 800334c:	d11b      	bne.n	8003386 <__kernel_sin+0xd6>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4650      	mov	r0, sl
 8003354:	4659      	mov	r1, fp
 8003356:	f7fd f8fb 	bl	8000550 <__aeabi_dmul>
 800335a:	a325      	add	r3, pc, #148	@ (adr r3, 80033f0 <__kernel_sin+0x140>)
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	f7fc ff3e 	bl	80001e0 <__aeabi_dsub>
 8003364:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003368:	f7fd f8f2 	bl	8000550 <__aeabi_dmul>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4620      	mov	r0, r4
 8003372:	4629      	mov	r1, r5
 8003374:	f7fc ff36 	bl	80001e4 <__adddf3>
 8003378:	4604      	mov	r4, r0
 800337a:	460d      	mov	r5, r1
 800337c:	ec45 4b10 	vmov	d0, r4, r5
 8003380:	b005      	add	sp, #20
 8003382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800338a:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <__kernel_sin+0x148>)
 800338c:	2200      	movs	r2, #0
 800338e:	f7fd f8df 	bl	8000550 <__aeabi_dmul>
 8003392:	4632      	mov	r2, r6
 8003394:	4680      	mov	r8, r0
 8003396:	4689      	mov	r9, r1
 8003398:	463b      	mov	r3, r7
 800339a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800339e:	f7fd f8d7 	bl	8000550 <__aeabi_dmul>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4640      	mov	r0, r8
 80033a8:	4649      	mov	r1, r9
 80033aa:	f7fc ff19 	bl	80001e0 <__aeabi_dsub>
 80033ae:	4652      	mov	r2, sl
 80033b0:	465b      	mov	r3, fp
 80033b2:	f7fd f8cd 	bl	8000550 <__aeabi_dmul>
 80033b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033ba:	f7fc ff11 	bl	80001e0 <__aeabi_dsub>
 80033be:	a30c      	add	r3, pc, #48	@ (adr r3, 80033f0 <__kernel_sin+0x140>)
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	4606      	mov	r6, r0
 80033c6:	460f      	mov	r7, r1
 80033c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033cc:	f7fd f8c0 	bl	8000550 <__aeabi_dmul>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4630      	mov	r0, r6
 80033d6:	4639      	mov	r1, r7
 80033d8:	f7fc ff04 	bl	80001e4 <__adddf3>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4620      	mov	r0, r4
 80033e2:	4629      	mov	r1, r5
 80033e4:	f7fc fefc 	bl	80001e0 <__aeabi_dsub>
 80033e8:	e7c6      	b.n	8003378 <__kernel_sin+0xc8>
 80033ea:	bf00      	nop
 80033ec:	f3af 8000 	nop.w
 80033f0:	55555549 	.word	0x55555549
 80033f4:	3fc55555 	.word	0x3fc55555
 80033f8:	3fe00000 	.word	0x3fe00000
 80033fc:	5acfd57c 	.word	0x5acfd57c
 8003400:	3de5d93a 	.word	0x3de5d93a
 8003404:	8a2b9ceb 	.word	0x8a2b9ceb
 8003408:	3e5ae5e6 	.word	0x3e5ae5e6
 800340c:	57b1fe7d 	.word	0x57b1fe7d
 8003410:	3ec71de3 	.word	0x3ec71de3
 8003414:	19c161d5 	.word	0x19c161d5
 8003418:	3f2a01a0 	.word	0x3f2a01a0
 800341c:	1110f8a6 	.word	0x1110f8a6
 8003420:	3f811111 	.word	0x3f811111
 8003424:	00000000 	.word	0x00000000

08003428 <__ieee754_rem_pio2>:
 8003428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800342c:	ec57 6b10 	vmov	r6, r7, d0
 8003430:	4bc5      	ldr	r3, [pc, #788]	@ (8003748 <__ieee754_rem_pio2+0x320>)
 8003432:	b08d      	sub	sp, #52	@ 0x34
 8003434:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003438:	4598      	cmp	r8, r3
 800343a:	4604      	mov	r4, r0
 800343c:	9704      	str	r7, [sp, #16]
 800343e:	d807      	bhi.n	8003450 <__ieee754_rem_pio2+0x28>
 8003440:	2200      	movs	r2, #0
 8003442:	2300      	movs	r3, #0
 8003444:	ed80 0b00 	vstr	d0, [r0]
 8003448:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800344c:	2500      	movs	r5, #0
 800344e:	e028      	b.n	80034a2 <__ieee754_rem_pio2+0x7a>
 8003450:	4bbe      	ldr	r3, [pc, #760]	@ (800374c <__ieee754_rem_pio2+0x324>)
 8003452:	4598      	cmp	r8, r3
 8003454:	d878      	bhi.n	8003548 <__ieee754_rem_pio2+0x120>
 8003456:	9b04      	ldr	r3, [sp, #16]
 8003458:	4dbd      	ldr	r5, [pc, #756]	@ (8003750 <__ieee754_rem_pio2+0x328>)
 800345a:	2b00      	cmp	r3, #0
 800345c:	4630      	mov	r0, r6
 800345e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003710 <__ieee754_rem_pio2+0x2e8>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	4639      	mov	r1, r7
 8003466:	dd38      	ble.n	80034da <__ieee754_rem_pio2+0xb2>
 8003468:	f7fc feba 	bl	80001e0 <__aeabi_dsub>
 800346c:	45a8      	cmp	r8, r5
 800346e:	4606      	mov	r6, r0
 8003470:	460f      	mov	r7, r1
 8003472:	d01a      	beq.n	80034aa <__ieee754_rem_pio2+0x82>
 8003474:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003718 <__ieee754_rem_pio2+0x2f0>)
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f7fc feb1 	bl	80001e0 <__aeabi_dsub>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4680      	mov	r8, r0
 8003484:	4689      	mov	r9, r1
 8003486:	4630      	mov	r0, r6
 8003488:	4639      	mov	r1, r7
 800348a:	f7fc fea9 	bl	80001e0 <__aeabi_dsub>
 800348e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003718 <__ieee754_rem_pio2+0x2f0>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f7fc fea4 	bl	80001e0 <__aeabi_dsub>
 8003498:	e9c4 8900 	strd	r8, r9, [r4]
 800349c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80034a0:	2501      	movs	r5, #1
 80034a2:	4628      	mov	r0, r5
 80034a4:	b00d      	add	sp, #52	@ 0x34
 80034a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034aa:	a39d      	add	r3, pc, #628	@ (adr r3, 8003720 <__ieee754_rem_pio2+0x2f8>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fc fe96 	bl	80001e0 <__aeabi_dsub>
 80034b4:	a39c      	add	r3, pc, #624	@ (adr r3, 8003728 <__ieee754_rem_pio2+0x300>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	4606      	mov	r6, r0
 80034bc:	460f      	mov	r7, r1
 80034be:	f7fc fe8f 	bl	80001e0 <__aeabi_dsub>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4680      	mov	r8, r0
 80034c8:	4689      	mov	r9, r1
 80034ca:	4630      	mov	r0, r6
 80034cc:	4639      	mov	r1, r7
 80034ce:	f7fc fe87 	bl	80001e0 <__aeabi_dsub>
 80034d2:	a395      	add	r3, pc, #596	@ (adr r3, 8003728 <__ieee754_rem_pio2+0x300>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	e7dc      	b.n	8003494 <__ieee754_rem_pio2+0x6c>
 80034da:	f7fc fe83 	bl	80001e4 <__adddf3>
 80034de:	45a8      	cmp	r8, r5
 80034e0:	4606      	mov	r6, r0
 80034e2:	460f      	mov	r7, r1
 80034e4:	d018      	beq.n	8003518 <__ieee754_rem_pio2+0xf0>
 80034e6:	a38c      	add	r3, pc, #560	@ (adr r3, 8003718 <__ieee754_rem_pio2+0x2f0>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fc fe7a 	bl	80001e4 <__adddf3>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4680      	mov	r8, r0
 80034f6:	4689      	mov	r9, r1
 80034f8:	4630      	mov	r0, r6
 80034fa:	4639      	mov	r1, r7
 80034fc:	f7fc fe70 	bl	80001e0 <__aeabi_dsub>
 8003500:	a385      	add	r3, pc, #532	@ (adr r3, 8003718 <__ieee754_rem_pio2+0x2f0>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f7fc fe6d 	bl	80001e4 <__adddf3>
 800350a:	f04f 35ff 	mov.w	r5, #4294967295
 800350e:	e9c4 8900 	strd	r8, r9, [r4]
 8003512:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003516:	e7c4      	b.n	80034a2 <__ieee754_rem_pio2+0x7a>
 8003518:	a381      	add	r3, pc, #516	@ (adr r3, 8003720 <__ieee754_rem_pio2+0x2f8>)
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f7fc fe61 	bl	80001e4 <__adddf3>
 8003522:	a381      	add	r3, pc, #516	@ (adr r3, 8003728 <__ieee754_rem_pio2+0x300>)
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	4606      	mov	r6, r0
 800352a:	460f      	mov	r7, r1
 800352c:	f7fc fe5a 	bl	80001e4 <__adddf3>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4680      	mov	r8, r0
 8003536:	4689      	mov	r9, r1
 8003538:	4630      	mov	r0, r6
 800353a:	4639      	mov	r1, r7
 800353c:	f7fc fe50 	bl	80001e0 <__aeabi_dsub>
 8003540:	a379      	add	r3, pc, #484	@ (adr r3, 8003728 <__ieee754_rem_pio2+0x300>)
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	e7de      	b.n	8003506 <__ieee754_rem_pio2+0xde>
 8003548:	4b82      	ldr	r3, [pc, #520]	@ (8003754 <__ieee754_rem_pio2+0x32c>)
 800354a:	4598      	cmp	r8, r3
 800354c:	f200 80d1 	bhi.w	80036f2 <__ieee754_rem_pio2+0x2ca>
 8003550:	f000 f966 	bl	8003820 <fabs>
 8003554:	ec57 6b10 	vmov	r6, r7, d0
 8003558:	a375      	add	r3, pc, #468	@ (adr r3, 8003730 <__ieee754_rem_pio2+0x308>)
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	4630      	mov	r0, r6
 8003560:	4639      	mov	r1, r7
 8003562:	f7fc fff5 	bl	8000550 <__aeabi_dmul>
 8003566:	4b7c      	ldr	r3, [pc, #496]	@ (8003758 <__ieee754_rem_pio2+0x330>)
 8003568:	2200      	movs	r2, #0
 800356a:	f7fc fe3b 	bl	80001e4 <__adddf3>
 800356e:	f7fd fa89 	bl	8000a84 <__aeabi_d2iz>
 8003572:	4605      	mov	r5, r0
 8003574:	f7fc ff82 	bl	800047c <__aeabi_i2d>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003580:	a363      	add	r3, pc, #396	@ (adr r3, 8003710 <__ieee754_rem_pio2+0x2e8>)
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f7fc ffe3 	bl	8000550 <__aeabi_dmul>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4630      	mov	r0, r6
 8003590:	4639      	mov	r1, r7
 8003592:	f7fc fe25 	bl	80001e0 <__aeabi_dsub>
 8003596:	a360      	add	r3, pc, #384	@ (adr r3, 8003718 <__ieee754_rem_pio2+0x2f0>)
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	4682      	mov	sl, r0
 800359e:	468b      	mov	fp, r1
 80035a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035a4:	f7fc ffd4 	bl	8000550 <__aeabi_dmul>
 80035a8:	2d1f      	cmp	r5, #31
 80035aa:	4606      	mov	r6, r0
 80035ac:	460f      	mov	r7, r1
 80035ae:	dc0c      	bgt.n	80035ca <__ieee754_rem_pio2+0x1a2>
 80035b0:	4b6a      	ldr	r3, [pc, #424]	@ (800375c <__ieee754_rem_pio2+0x334>)
 80035b2:	1e6a      	subs	r2, r5, #1
 80035b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b8:	4543      	cmp	r3, r8
 80035ba:	d006      	beq.n	80035ca <__ieee754_rem_pio2+0x1a2>
 80035bc:	4632      	mov	r2, r6
 80035be:	463b      	mov	r3, r7
 80035c0:	4650      	mov	r0, sl
 80035c2:	4659      	mov	r1, fp
 80035c4:	f7fc fe0c 	bl	80001e0 <__aeabi_dsub>
 80035c8:	e00e      	b.n	80035e8 <__ieee754_rem_pio2+0x1c0>
 80035ca:	463b      	mov	r3, r7
 80035cc:	4632      	mov	r2, r6
 80035ce:	4650      	mov	r0, sl
 80035d0:	4659      	mov	r1, fp
 80035d2:	f7fc fe05 	bl	80001e0 <__aeabi_dsub>
 80035d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80035da:	9305      	str	r3, [sp, #20]
 80035dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80035e0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	dc02      	bgt.n	80035ee <__ieee754_rem_pio2+0x1c6>
 80035e8:	e9c4 0100 	strd	r0, r1, [r4]
 80035ec:	e039      	b.n	8003662 <__ieee754_rem_pio2+0x23a>
 80035ee:	a34c      	add	r3, pc, #304	@ (adr r3, 8003720 <__ieee754_rem_pio2+0x2f8>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035f8:	f7fc ffaa 	bl	8000550 <__aeabi_dmul>
 80035fc:	4606      	mov	r6, r0
 80035fe:	460f      	mov	r7, r1
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4650      	mov	r0, sl
 8003606:	4659      	mov	r1, fp
 8003608:	f7fc fdea 	bl	80001e0 <__aeabi_dsub>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4680      	mov	r8, r0
 8003612:	4689      	mov	r9, r1
 8003614:	4650      	mov	r0, sl
 8003616:	4659      	mov	r1, fp
 8003618:	f7fc fde2 	bl	80001e0 <__aeabi_dsub>
 800361c:	4632      	mov	r2, r6
 800361e:	463b      	mov	r3, r7
 8003620:	f7fc fdde 	bl	80001e0 <__aeabi_dsub>
 8003624:	a340      	add	r3, pc, #256	@ (adr r3, 8003728 <__ieee754_rem_pio2+0x300>)
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	4606      	mov	r6, r0
 800362c:	460f      	mov	r7, r1
 800362e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003632:	f7fc ff8d 	bl	8000550 <__aeabi_dmul>
 8003636:	4632      	mov	r2, r6
 8003638:	463b      	mov	r3, r7
 800363a:	f7fc fdd1 	bl	80001e0 <__aeabi_dsub>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4606      	mov	r6, r0
 8003644:	460f      	mov	r7, r1
 8003646:	4640      	mov	r0, r8
 8003648:	4649      	mov	r1, r9
 800364a:	f7fc fdc9 	bl	80001e0 <__aeabi_dsub>
 800364e:	9a05      	ldr	r2, [sp, #20]
 8003650:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b31      	cmp	r3, #49	@ 0x31
 8003658:	dc20      	bgt.n	800369c <__ieee754_rem_pio2+0x274>
 800365a:	e9c4 0100 	strd	r0, r1, [r4]
 800365e:	46c2      	mov	sl, r8
 8003660:	46cb      	mov	fp, r9
 8003662:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003666:	4650      	mov	r0, sl
 8003668:	4642      	mov	r2, r8
 800366a:	464b      	mov	r3, r9
 800366c:	4659      	mov	r1, fp
 800366e:	f7fc fdb7 	bl	80001e0 <__aeabi_dsub>
 8003672:	463b      	mov	r3, r7
 8003674:	4632      	mov	r2, r6
 8003676:	f7fc fdb3 	bl	80001e0 <__aeabi_dsub>
 800367a:	9b04      	ldr	r3, [sp, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003682:	f6bf af0e 	bge.w	80034a2 <__ieee754_rem_pio2+0x7a>
 8003686:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800368a:	6063      	str	r3, [r4, #4]
 800368c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003690:	f8c4 8000 	str.w	r8, [r4]
 8003694:	60a0      	str	r0, [r4, #8]
 8003696:	60e3      	str	r3, [r4, #12]
 8003698:	426d      	negs	r5, r5
 800369a:	e702      	b.n	80034a2 <__ieee754_rem_pio2+0x7a>
 800369c:	a326      	add	r3, pc, #152	@ (adr r3, 8003738 <__ieee754_rem_pio2+0x310>)
 800369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036a6:	f7fc ff53 	bl	8000550 <__aeabi_dmul>
 80036aa:	4606      	mov	r6, r0
 80036ac:	460f      	mov	r7, r1
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4640      	mov	r0, r8
 80036b4:	4649      	mov	r1, r9
 80036b6:	f7fc fd93 	bl	80001e0 <__aeabi_dsub>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4682      	mov	sl, r0
 80036c0:	468b      	mov	fp, r1
 80036c2:	4640      	mov	r0, r8
 80036c4:	4649      	mov	r1, r9
 80036c6:	f7fc fd8b 	bl	80001e0 <__aeabi_dsub>
 80036ca:	4632      	mov	r2, r6
 80036cc:	463b      	mov	r3, r7
 80036ce:	f7fc fd87 	bl	80001e0 <__aeabi_dsub>
 80036d2:	a31b      	add	r3, pc, #108	@ (adr r3, 8003740 <__ieee754_rem_pio2+0x318>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	4606      	mov	r6, r0
 80036da:	460f      	mov	r7, r1
 80036dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036e0:	f7fc ff36 	bl	8000550 <__aeabi_dmul>
 80036e4:	4632      	mov	r2, r6
 80036e6:	463b      	mov	r3, r7
 80036e8:	f7fc fd7a 	bl	80001e0 <__aeabi_dsub>
 80036ec:	4606      	mov	r6, r0
 80036ee:	460f      	mov	r7, r1
 80036f0:	e764      	b.n	80035bc <__ieee754_rem_pio2+0x194>
 80036f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003760 <__ieee754_rem_pio2+0x338>)
 80036f4:	4598      	cmp	r8, r3
 80036f6:	d935      	bls.n	8003764 <__ieee754_rem_pio2+0x33c>
 80036f8:	4632      	mov	r2, r6
 80036fa:	463b      	mov	r3, r7
 80036fc:	4630      	mov	r0, r6
 80036fe:	4639      	mov	r1, r7
 8003700:	f7fc fd6e 	bl	80001e0 <__aeabi_dsub>
 8003704:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003708:	e9c4 0100 	strd	r0, r1, [r4]
 800370c:	e69e      	b.n	800344c <__ieee754_rem_pio2+0x24>
 800370e:	bf00      	nop
 8003710:	54400000 	.word	0x54400000
 8003714:	3ff921fb 	.word	0x3ff921fb
 8003718:	1a626331 	.word	0x1a626331
 800371c:	3dd0b461 	.word	0x3dd0b461
 8003720:	1a600000 	.word	0x1a600000
 8003724:	3dd0b461 	.word	0x3dd0b461
 8003728:	2e037073 	.word	0x2e037073
 800372c:	3ba3198a 	.word	0x3ba3198a
 8003730:	6dc9c883 	.word	0x6dc9c883
 8003734:	3fe45f30 	.word	0x3fe45f30
 8003738:	2e000000 	.word	0x2e000000
 800373c:	3ba3198a 	.word	0x3ba3198a
 8003740:	252049c1 	.word	0x252049c1
 8003744:	397b839a 	.word	0x397b839a
 8003748:	3fe921fb 	.word	0x3fe921fb
 800374c:	4002d97b 	.word	0x4002d97b
 8003750:	3ff921fb 	.word	0x3ff921fb
 8003754:	413921fb 	.word	0x413921fb
 8003758:	3fe00000 	.word	0x3fe00000
 800375c:	08004100 	.word	0x08004100
 8003760:	7fefffff 	.word	0x7fefffff
 8003764:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003768:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800376c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003770:	4630      	mov	r0, r6
 8003772:	460f      	mov	r7, r1
 8003774:	f7fd f986 	bl	8000a84 <__aeabi_d2iz>
 8003778:	f7fc fe80 	bl	800047c <__aeabi_i2d>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4630      	mov	r0, r6
 8003782:	4639      	mov	r1, r7
 8003784:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003788:	f7fc fd2a 	bl	80001e0 <__aeabi_dsub>
 800378c:	4b22      	ldr	r3, [pc, #136]	@ (8003818 <__ieee754_rem_pio2+0x3f0>)
 800378e:	2200      	movs	r2, #0
 8003790:	f7fc fede 	bl	8000550 <__aeabi_dmul>
 8003794:	460f      	mov	r7, r1
 8003796:	4606      	mov	r6, r0
 8003798:	f7fd f974 	bl	8000a84 <__aeabi_d2iz>
 800379c:	f7fc fe6e 	bl	800047c <__aeabi_i2d>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4630      	mov	r0, r6
 80037a6:	4639      	mov	r1, r7
 80037a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80037ac:	f7fc fd18 	bl	80001e0 <__aeabi_dsub>
 80037b0:	4b19      	ldr	r3, [pc, #100]	@ (8003818 <__ieee754_rem_pio2+0x3f0>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	f7fc fecc 	bl	8000550 <__aeabi_dmul>
 80037b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80037bc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80037c0:	f04f 0803 	mov.w	r8, #3
 80037c4:	2600      	movs	r6, #0
 80037c6:	2700      	movs	r7, #0
 80037c8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80037cc:	4632      	mov	r2, r6
 80037ce:	463b      	mov	r3, r7
 80037d0:	46c2      	mov	sl, r8
 80037d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80037d6:	f7fd f923 	bl	8000a20 <__aeabi_dcmpeq>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d1f4      	bne.n	80037c8 <__ieee754_rem_pio2+0x3a0>
 80037de:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <__ieee754_rem_pio2+0x3f4>)
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	2302      	movs	r3, #2
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	462a      	mov	r2, r5
 80037e8:	4653      	mov	r3, sl
 80037ea:	4621      	mov	r1, r4
 80037ec:	a806      	add	r0, sp, #24
 80037ee:	f000 f81f 	bl	8003830 <__kernel_rem_pio2>
 80037f2:	9b04      	ldr	r3, [sp, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	4605      	mov	r5, r0
 80037f8:	f6bf ae53 	bge.w	80034a2 <__ieee754_rem_pio2+0x7a>
 80037fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003800:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003804:	e9c4 2300 	strd	r2, r3, [r4]
 8003808:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800380c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003810:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003814:	e740      	b.n	8003698 <__ieee754_rem_pio2+0x270>
 8003816:	bf00      	nop
 8003818:	41700000 	.word	0x41700000
 800381c:	08004180 	.word	0x08004180

08003820 <fabs>:
 8003820:	ec51 0b10 	vmov	r0, r1, d0
 8003824:	4602      	mov	r2, r0
 8003826:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800382a:	ec43 2b10 	vmov	d0, r2, r3
 800382e:	4770      	bx	lr

08003830 <__kernel_rem_pio2>:
 8003830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003834:	ed2d 8b02 	vpush	{d8}
 8003838:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800383c:	f112 0f14 	cmn.w	r2, #20
 8003840:	9306      	str	r3, [sp, #24]
 8003842:	9104      	str	r1, [sp, #16]
 8003844:	4bbe      	ldr	r3, [pc, #760]	@ (8003b40 <__kernel_rem_pio2+0x310>)
 8003846:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003848:	9008      	str	r0, [sp, #32]
 800384a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	9b06      	ldr	r3, [sp, #24]
 8003852:	f103 33ff 	add.w	r3, r3, #4294967295
 8003856:	bfa8      	it	ge
 8003858:	1ed4      	subge	r4, r2, #3
 800385a:	9305      	str	r3, [sp, #20]
 800385c:	bfb2      	itee	lt
 800385e:	2400      	movlt	r4, #0
 8003860:	2318      	movge	r3, #24
 8003862:	fb94 f4f3 	sdivge	r4, r4, r3
 8003866:	f06f 0317 	mvn.w	r3, #23
 800386a:	fb04 3303 	mla	r3, r4, r3, r3
 800386e:	eb03 0b02 	add.w	fp, r3, r2
 8003872:	9b00      	ldr	r3, [sp, #0]
 8003874:	9a05      	ldr	r2, [sp, #20]
 8003876:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8003b30 <__kernel_rem_pio2+0x300>
 800387a:	eb03 0802 	add.w	r8, r3, r2
 800387e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003880:	1aa7      	subs	r7, r4, r2
 8003882:	ae20      	add	r6, sp, #128	@ 0x80
 8003884:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003888:	2500      	movs	r5, #0
 800388a:	4545      	cmp	r5, r8
 800388c:	dd13      	ble.n	80038b6 <__kernel_rem_pio2+0x86>
 800388e:	9b06      	ldr	r3, [sp, #24]
 8003890:	aa20      	add	r2, sp, #128	@ 0x80
 8003892:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003896:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800389a:	f04f 0800 	mov.w	r8, #0
 800389e:	9b00      	ldr	r3, [sp, #0]
 80038a0:	4598      	cmp	r8, r3
 80038a2:	dc31      	bgt.n	8003908 <__kernel_rem_pio2+0xd8>
 80038a4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8003b30 <__kernel_rem_pio2+0x300>
 80038a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80038b0:	462f      	mov	r7, r5
 80038b2:	2600      	movs	r6, #0
 80038b4:	e01b      	b.n	80038ee <__kernel_rem_pio2+0xbe>
 80038b6:	42ef      	cmn	r7, r5
 80038b8:	d407      	bmi.n	80038ca <__kernel_rem_pio2+0x9a>
 80038ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80038be:	f7fc fddd 	bl	800047c <__aeabi_i2d>
 80038c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80038c6:	3501      	adds	r5, #1
 80038c8:	e7df      	b.n	800388a <__kernel_rem_pio2+0x5a>
 80038ca:	ec51 0b18 	vmov	r0, r1, d8
 80038ce:	e7f8      	b.n	80038c2 <__kernel_rem_pio2+0x92>
 80038d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80038d8:	f7fc fe3a 	bl	8000550 <__aeabi_dmul>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038e4:	f7fc fc7e 	bl	80001e4 <__adddf3>
 80038e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038ec:	3601      	adds	r6, #1
 80038ee:	9b05      	ldr	r3, [sp, #20]
 80038f0:	429e      	cmp	r6, r3
 80038f2:	f1a7 0708 	sub.w	r7, r7, #8
 80038f6:	ddeb      	ble.n	80038d0 <__kernel_rem_pio2+0xa0>
 80038f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80038fc:	f108 0801 	add.w	r8, r8, #1
 8003900:	ecaa 7b02 	vstmia	sl!, {d7}
 8003904:	3508      	adds	r5, #8
 8003906:	e7ca      	b.n	800389e <__kernel_rem_pio2+0x6e>
 8003908:	9b00      	ldr	r3, [sp, #0]
 800390a:	f8dd 8000 	ldr.w	r8, [sp]
 800390e:	aa0c      	add	r2, sp, #48	@ 0x30
 8003910:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003914:	930a      	str	r3, [sp, #40]	@ 0x28
 8003916:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003918:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800391c:	9309      	str	r3, [sp, #36]	@ 0x24
 800391e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003922:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003924:	ab98      	add	r3, sp, #608	@ 0x260
 8003926:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800392a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800392e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003932:	ac0c      	add	r4, sp, #48	@ 0x30
 8003934:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003936:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800393a:	46a1      	mov	r9, r4
 800393c:	46c2      	mov	sl, r8
 800393e:	f1ba 0f00 	cmp.w	sl, #0
 8003942:	f1a5 0508 	sub.w	r5, r5, #8
 8003946:	dc77      	bgt.n	8003a38 <__kernel_rem_pio2+0x208>
 8003948:	4658      	mov	r0, fp
 800394a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800394e:	f000 fac7 	bl	8003ee0 <scalbn>
 8003952:	ec57 6b10 	vmov	r6, r7, d0
 8003956:	2200      	movs	r2, #0
 8003958:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800395c:	4630      	mov	r0, r6
 800395e:	4639      	mov	r1, r7
 8003960:	f7fc fdf6 	bl	8000550 <__aeabi_dmul>
 8003964:	ec41 0b10 	vmov	d0, r0, r1
 8003968:	f000 fb3a 	bl	8003fe0 <floor>
 800396c:	4b75      	ldr	r3, [pc, #468]	@ (8003b44 <__kernel_rem_pio2+0x314>)
 800396e:	ec51 0b10 	vmov	r0, r1, d0
 8003972:	2200      	movs	r2, #0
 8003974:	f7fc fdec 	bl	8000550 <__aeabi_dmul>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4630      	mov	r0, r6
 800397e:	4639      	mov	r1, r7
 8003980:	f7fc fc2e 	bl	80001e0 <__aeabi_dsub>
 8003984:	460f      	mov	r7, r1
 8003986:	4606      	mov	r6, r0
 8003988:	f7fd f87c 	bl	8000a84 <__aeabi_d2iz>
 800398c:	9002      	str	r0, [sp, #8]
 800398e:	f7fc fd75 	bl	800047c <__aeabi_i2d>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4630      	mov	r0, r6
 8003998:	4639      	mov	r1, r7
 800399a:	f7fc fc21 	bl	80001e0 <__aeabi_dsub>
 800399e:	f1bb 0f00 	cmp.w	fp, #0
 80039a2:	4606      	mov	r6, r0
 80039a4:	460f      	mov	r7, r1
 80039a6:	dd6c      	ble.n	8003a82 <__kernel_rem_pio2+0x252>
 80039a8:	f108 31ff 	add.w	r1, r8, #4294967295
 80039ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80039ae:	9d02      	ldr	r5, [sp, #8]
 80039b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039b4:	f1cb 0018 	rsb	r0, fp, #24
 80039b8:	fa43 f200 	asr.w	r2, r3, r0
 80039bc:	4415      	add	r5, r2
 80039be:	4082      	lsls	r2, r0
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	aa0c      	add	r2, sp, #48	@ 0x30
 80039c4:	9502      	str	r5, [sp, #8]
 80039c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80039ca:	f1cb 0217 	rsb	r2, fp, #23
 80039ce:	fa43 f902 	asr.w	r9, r3, r2
 80039d2:	f1b9 0f00 	cmp.w	r9, #0
 80039d6:	dd64      	ble.n	8003aa2 <__kernel_rem_pio2+0x272>
 80039d8:	9b02      	ldr	r3, [sp, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	3301      	adds	r3, #1
 80039de:	9302      	str	r3, [sp, #8]
 80039e0:	4615      	mov	r5, r2
 80039e2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80039e6:	4590      	cmp	r8, r2
 80039e8:	f300 80b8 	bgt.w	8003b5c <__kernel_rem_pio2+0x32c>
 80039ec:	f1bb 0f00 	cmp.w	fp, #0
 80039f0:	dd07      	ble.n	8003a02 <__kernel_rem_pio2+0x1d2>
 80039f2:	f1bb 0f01 	cmp.w	fp, #1
 80039f6:	f000 80bf 	beq.w	8003b78 <__kernel_rem_pio2+0x348>
 80039fa:	f1bb 0f02 	cmp.w	fp, #2
 80039fe:	f000 80c6 	beq.w	8003b8e <__kernel_rem_pio2+0x35e>
 8003a02:	f1b9 0f02 	cmp.w	r9, #2
 8003a06:	d14c      	bne.n	8003aa2 <__kernel_rem_pio2+0x272>
 8003a08:	4632      	mov	r2, r6
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	494e      	ldr	r1, [pc, #312]	@ (8003b48 <__kernel_rem_pio2+0x318>)
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f7fc fbe6 	bl	80001e0 <__aeabi_dsub>
 8003a14:	4606      	mov	r6, r0
 8003a16:	460f      	mov	r7, r1
 8003a18:	2d00      	cmp	r5, #0
 8003a1a:	d042      	beq.n	8003aa2 <__kernel_rem_pio2+0x272>
 8003a1c:	4658      	mov	r0, fp
 8003a1e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8003b38 <__kernel_rem_pio2+0x308>
 8003a22:	f000 fa5d 	bl	8003ee0 <scalbn>
 8003a26:	4630      	mov	r0, r6
 8003a28:	4639      	mov	r1, r7
 8003a2a:	ec53 2b10 	vmov	r2, r3, d0
 8003a2e:	f7fc fbd7 	bl	80001e0 <__aeabi_dsub>
 8003a32:	4606      	mov	r6, r0
 8003a34:	460f      	mov	r7, r1
 8003a36:	e034      	b.n	8003aa2 <__kernel_rem_pio2+0x272>
 8003a38:	4b44      	ldr	r3, [pc, #272]	@ (8003b4c <__kernel_rem_pio2+0x31c>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a40:	f7fc fd86 	bl	8000550 <__aeabi_dmul>
 8003a44:	f7fd f81e 	bl	8000a84 <__aeabi_d2iz>
 8003a48:	f7fc fd18 	bl	800047c <__aeabi_i2d>
 8003a4c:	4b40      	ldr	r3, [pc, #256]	@ (8003b50 <__kernel_rem_pio2+0x320>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	4606      	mov	r6, r0
 8003a52:	460f      	mov	r7, r1
 8003a54:	f7fc fd7c 	bl	8000550 <__aeabi_dmul>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a60:	f7fc fbbe 	bl	80001e0 <__aeabi_dsub>
 8003a64:	f7fd f80e 	bl	8000a84 <__aeabi_d2iz>
 8003a68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003a6c:	f849 0b04 	str.w	r0, [r9], #4
 8003a70:	4639      	mov	r1, r7
 8003a72:	4630      	mov	r0, r6
 8003a74:	f7fc fbb6 	bl	80001e4 <__adddf3>
 8003a78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a80:	e75d      	b.n	800393e <__kernel_rem_pio2+0x10e>
 8003a82:	d107      	bne.n	8003a94 <__kernel_rem_pio2+0x264>
 8003a84:	f108 33ff 	add.w	r3, r8, #4294967295
 8003a88:	aa0c      	add	r2, sp, #48	@ 0x30
 8003a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8003a92:	e79e      	b.n	80039d2 <__kernel_rem_pio2+0x1a2>
 8003a94:	4b2f      	ldr	r3, [pc, #188]	@ (8003b54 <__kernel_rem_pio2+0x324>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	f7fc ffe0 	bl	8000a5c <__aeabi_dcmpge>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d143      	bne.n	8003b28 <__kernel_rem_pio2+0x2f8>
 8003aa0:	4681      	mov	r9, r0
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	4639      	mov	r1, r7
 8003aaa:	f7fc ffb9 	bl	8000a20 <__aeabi_dcmpeq>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	f000 80bf 	beq.w	8003c32 <__kernel_rem_pio2+0x402>
 8003ab4:	f108 33ff 	add.w	r3, r8, #4294967295
 8003ab8:	2200      	movs	r2, #0
 8003aba:	9900      	ldr	r1, [sp, #0]
 8003abc:	428b      	cmp	r3, r1
 8003abe:	da6e      	bge.n	8003b9e <__kernel_rem_pio2+0x36e>
 8003ac0:	2a00      	cmp	r2, #0
 8003ac2:	f000 8089 	beq.w	8003bd8 <__kernel_rem_pio2+0x3a8>
 8003ac6:	f108 38ff 	add.w	r8, r8, #4294967295
 8003aca:	ab0c      	add	r3, sp, #48	@ 0x30
 8003acc:	f1ab 0b18 	sub.w	fp, fp, #24
 8003ad0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f6      	beq.n	8003ac6 <__kernel_rem_pio2+0x296>
 8003ad8:	4658      	mov	r0, fp
 8003ada:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8003b38 <__kernel_rem_pio2+0x308>
 8003ade:	f000 f9ff 	bl	8003ee0 <scalbn>
 8003ae2:	f108 0301 	add.w	r3, r8, #1
 8003ae6:	00da      	lsls	r2, r3, #3
 8003ae8:	9205      	str	r2, [sp, #20]
 8003aea:	ec55 4b10 	vmov	r4, r5, d0
 8003aee:	aa70      	add	r2, sp, #448	@ 0x1c0
 8003af0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8003b4c <__kernel_rem_pio2+0x31c>
 8003af4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8003af8:	4646      	mov	r6, r8
 8003afa:	f04f 0a00 	mov.w	sl, #0
 8003afe:	2e00      	cmp	r6, #0
 8003b00:	f280 80cf 	bge.w	8003ca2 <__kernel_rem_pio2+0x472>
 8003b04:	4644      	mov	r4, r8
 8003b06:	2c00      	cmp	r4, #0
 8003b08:	f2c0 80fd 	blt.w	8003d06 <__kernel_rem_pio2+0x4d6>
 8003b0c:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <__kernel_rem_pio2+0x328>)
 8003b0e:	461f      	mov	r7, r3
 8003b10:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003b12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003b16:	9306      	str	r3, [sp, #24]
 8003b18:	f04f 0a00 	mov.w	sl, #0
 8003b1c:	f04f 0b00 	mov.w	fp, #0
 8003b20:	2600      	movs	r6, #0
 8003b22:	eba8 0504 	sub.w	r5, r8, r4
 8003b26:	e0e2      	b.n	8003cee <__kernel_rem_pio2+0x4be>
 8003b28:	f04f 0902 	mov.w	r9, #2
 8003b2c:	e754      	b.n	80039d8 <__kernel_rem_pio2+0x1a8>
 8003b2e:	bf00      	nop
	...
 8003b3c:	3ff00000 	.word	0x3ff00000
 8003b40:	080042c8 	.word	0x080042c8
 8003b44:	40200000 	.word	0x40200000
 8003b48:	3ff00000 	.word	0x3ff00000
 8003b4c:	3e700000 	.word	0x3e700000
 8003b50:	41700000 	.word	0x41700000
 8003b54:	3fe00000 	.word	0x3fe00000
 8003b58:	08004288 	.word	0x08004288
 8003b5c:	f854 3b04 	ldr.w	r3, [r4], #4
 8003b60:	b945      	cbnz	r5, 8003b74 <__kernel_rem_pio2+0x344>
 8003b62:	b123      	cbz	r3, 8003b6e <__kernel_rem_pio2+0x33e>
 8003b64:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8003b68:	f844 3c04 	str.w	r3, [r4, #-4]
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	3201      	adds	r2, #1
 8003b70:	461d      	mov	r5, r3
 8003b72:	e738      	b.n	80039e6 <__kernel_rem_pio2+0x1b6>
 8003b74:	1acb      	subs	r3, r1, r3
 8003b76:	e7f7      	b.n	8003b68 <__kernel_rem_pio2+0x338>
 8003b78:	f108 32ff 	add.w	r2, r8, #4294967295
 8003b7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8003b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b82:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003b86:	a90c      	add	r1, sp, #48	@ 0x30
 8003b88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003b8c:	e739      	b.n	8003a02 <__kernel_rem_pio2+0x1d2>
 8003b8e:	f108 32ff 	add.w	r2, r8, #4294967295
 8003b92:	ab0c      	add	r3, sp, #48	@ 0x30
 8003b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003b9c:	e7f3      	b.n	8003b86 <__kernel_rem_pio2+0x356>
 8003b9e:	a90c      	add	r1, sp, #48	@ 0x30
 8003ba0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	e787      	b.n	8003aba <__kernel_rem_pio2+0x28a>
 8003baa:	3401      	adds	r4, #1
 8003bac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003bb0:	2a00      	cmp	r2, #0
 8003bb2:	d0fa      	beq.n	8003baa <__kernel_rem_pio2+0x37a>
 8003bb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003bb6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003bba:	eb0d 0503 	add.w	r5, sp, r3
 8003bbe:	9b06      	ldr	r3, [sp, #24]
 8003bc0:	aa20      	add	r2, sp, #128	@ 0x80
 8003bc2:	4443      	add	r3, r8
 8003bc4:	f108 0701 	add.w	r7, r8, #1
 8003bc8:	3d98      	subs	r5, #152	@ 0x98
 8003bca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8003bce:	4444      	add	r4, r8
 8003bd0:	42bc      	cmp	r4, r7
 8003bd2:	da04      	bge.n	8003bde <__kernel_rem_pio2+0x3ae>
 8003bd4:	46a0      	mov	r8, r4
 8003bd6:	e6a2      	b.n	800391e <__kernel_rem_pio2+0xee>
 8003bd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003bda:	2401      	movs	r4, #1
 8003bdc:	e7e6      	b.n	8003bac <__kernel_rem_pio2+0x37c>
 8003bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003be0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003be4:	f7fc fc4a 	bl	800047c <__aeabi_i2d>
 8003be8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8003eb0 <__kernel_rem_pio2+0x680>
 8003bec:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003bf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003bf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bf8:	46b2      	mov	sl, r6
 8003bfa:	f04f 0800 	mov.w	r8, #0
 8003bfe:	9b05      	ldr	r3, [sp, #20]
 8003c00:	4598      	cmp	r8, r3
 8003c02:	dd05      	ble.n	8003c10 <__kernel_rem_pio2+0x3e0>
 8003c04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003c08:	3701      	adds	r7, #1
 8003c0a:	eca5 7b02 	vstmia	r5!, {d7}
 8003c0e:	e7df      	b.n	8003bd0 <__kernel_rem_pio2+0x3a0>
 8003c10:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8003c14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003c18:	f7fc fc9a 	bl	8000550 <__aeabi_dmul>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c24:	f7fc fade 	bl	80001e4 <__adddf3>
 8003c28:	f108 0801 	add.w	r8, r8, #1
 8003c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c30:	e7e5      	b.n	8003bfe <__kernel_rem_pio2+0x3ce>
 8003c32:	f1cb 0000 	rsb	r0, fp, #0
 8003c36:	ec47 6b10 	vmov	d0, r6, r7
 8003c3a:	f000 f951 	bl	8003ee0 <scalbn>
 8003c3e:	ec55 4b10 	vmov	r4, r5, d0
 8003c42:	4b9d      	ldr	r3, [pc, #628]	@ (8003eb8 <__kernel_rem_pio2+0x688>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	4620      	mov	r0, r4
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f7fc ff07 	bl	8000a5c <__aeabi_dcmpge>
 8003c4e:	b300      	cbz	r0, 8003c92 <__kernel_rem_pio2+0x462>
 8003c50:	4b9a      	ldr	r3, [pc, #616]	@ (8003ebc <__kernel_rem_pio2+0x68c>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	4620      	mov	r0, r4
 8003c56:	4629      	mov	r1, r5
 8003c58:	f7fc fc7a 	bl	8000550 <__aeabi_dmul>
 8003c5c:	f7fc ff12 	bl	8000a84 <__aeabi_d2iz>
 8003c60:	4606      	mov	r6, r0
 8003c62:	f7fc fc0b 	bl	800047c <__aeabi_i2d>
 8003c66:	4b94      	ldr	r3, [pc, #592]	@ (8003eb8 <__kernel_rem_pio2+0x688>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f7fc fc71 	bl	8000550 <__aeabi_dmul>
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4602      	mov	r2, r0
 8003c72:	4629      	mov	r1, r5
 8003c74:	4620      	mov	r0, r4
 8003c76:	f7fc fab3 	bl	80001e0 <__aeabi_dsub>
 8003c7a:	f7fc ff03 	bl	8000a84 <__aeabi_d2iz>
 8003c7e:	ab0c      	add	r3, sp, #48	@ 0x30
 8003c80:	f10b 0b18 	add.w	fp, fp, #24
 8003c84:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003c88:	f108 0801 	add.w	r8, r8, #1
 8003c8c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8003c90:	e722      	b.n	8003ad8 <__kernel_rem_pio2+0x2a8>
 8003c92:	4620      	mov	r0, r4
 8003c94:	4629      	mov	r1, r5
 8003c96:	f7fc fef5 	bl	8000a84 <__aeabi_d2iz>
 8003c9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8003c9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003ca0:	e71a      	b.n	8003ad8 <__kernel_rem_pio2+0x2a8>
 8003ca2:	ab0c      	add	r3, sp, #48	@ 0x30
 8003ca4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003ca8:	f7fc fbe8 	bl	800047c <__aeabi_i2d>
 8003cac:	4622      	mov	r2, r4
 8003cae:	462b      	mov	r3, r5
 8003cb0:	f7fc fc4e 	bl	8000550 <__aeabi_dmul>
 8003cb4:	4652      	mov	r2, sl
 8003cb6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8003cba:	465b      	mov	r3, fp
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	f7fc fc46 	bl	8000550 <__aeabi_dmul>
 8003cc4:	3e01      	subs	r6, #1
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	460d      	mov	r5, r1
 8003cca:	e718      	b.n	8003afe <__kernel_rem_pio2+0x2ce>
 8003ccc:	9906      	ldr	r1, [sp, #24]
 8003cce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8003cd2:	9106      	str	r1, [sp, #24]
 8003cd4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8003cd8:	f7fc fc3a 	bl	8000550 <__aeabi_dmul>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	4659      	mov	r1, fp
 8003ce4:	f7fc fa7e 	bl	80001e4 <__adddf3>
 8003ce8:	3601      	adds	r6, #1
 8003cea:	4682      	mov	sl, r0
 8003cec:	468b      	mov	fp, r1
 8003cee:	9b00      	ldr	r3, [sp, #0]
 8003cf0:	429e      	cmp	r6, r3
 8003cf2:	dc01      	bgt.n	8003cf8 <__kernel_rem_pio2+0x4c8>
 8003cf4:	42b5      	cmp	r5, r6
 8003cf6:	dae9      	bge.n	8003ccc <__kernel_rem_pio2+0x49c>
 8003cf8:	ab48      	add	r3, sp, #288	@ 0x120
 8003cfa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003cfe:	e9c5 ab00 	strd	sl, fp, [r5]
 8003d02:	3c01      	subs	r4, #1
 8003d04:	e6ff      	b.n	8003b06 <__kernel_rem_pio2+0x2d6>
 8003d06:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	dc0b      	bgt.n	8003d24 <__kernel_rem_pio2+0x4f4>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	dc39      	bgt.n	8003d84 <__kernel_rem_pio2+0x554>
 8003d10:	d05d      	beq.n	8003dce <__kernel_rem_pio2+0x59e>
 8003d12:	9b02      	ldr	r3, [sp, #8]
 8003d14:	f003 0007 	and.w	r0, r3, #7
 8003d18:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8003d1c:	ecbd 8b02 	vpop	{d8}
 8003d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d24:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d1f3      	bne.n	8003d12 <__kernel_rem_pio2+0x4e2>
 8003d2a:	9b05      	ldr	r3, [sp, #20]
 8003d2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d30:	eb0d 0403 	add.w	r4, sp, r3
 8003d34:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8003d38:	4625      	mov	r5, r4
 8003d3a:	46c2      	mov	sl, r8
 8003d3c:	f1ba 0f00 	cmp.w	sl, #0
 8003d40:	f1a5 0508 	sub.w	r5, r5, #8
 8003d44:	dc6b      	bgt.n	8003e1e <__kernel_rem_pio2+0x5ee>
 8003d46:	4645      	mov	r5, r8
 8003d48:	2d01      	cmp	r5, #1
 8003d4a:	f1a4 0408 	sub.w	r4, r4, #8
 8003d4e:	f300 8087 	bgt.w	8003e60 <__kernel_rem_pio2+0x630>
 8003d52:	9c05      	ldr	r4, [sp, #20]
 8003d54:	ab48      	add	r3, sp, #288	@ 0x120
 8003d56:	441c      	add	r4, r3
 8003d58:	2000      	movs	r0, #0
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	f1b8 0f01 	cmp.w	r8, #1
 8003d60:	f300 809c 	bgt.w	8003e9c <__kernel_rem_pio2+0x66c>
 8003d64:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8003d68:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8003d6c:	f1b9 0f00 	cmp.w	r9, #0
 8003d70:	f040 80a6 	bne.w	8003ec0 <__kernel_rem_pio2+0x690>
 8003d74:	9b04      	ldr	r3, [sp, #16]
 8003d76:	e9c3 7800 	strd	r7, r8, [r3]
 8003d7a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003d7e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003d82:	e7c6      	b.n	8003d12 <__kernel_rem_pio2+0x4e2>
 8003d84:	9d05      	ldr	r5, [sp, #20]
 8003d86:	ab48      	add	r3, sp, #288	@ 0x120
 8003d88:	441d      	add	r5, r3
 8003d8a:	4644      	mov	r4, r8
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	2100      	movs	r1, #0
 8003d90:	2c00      	cmp	r4, #0
 8003d92:	da35      	bge.n	8003e00 <__kernel_rem_pio2+0x5d0>
 8003d94:	f1b9 0f00 	cmp.w	r9, #0
 8003d98:	d038      	beq.n	8003e0c <__kernel_rem_pio2+0x5dc>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003da0:	9c04      	ldr	r4, [sp, #16]
 8003da2:	e9c4 2300 	strd	r2, r3, [r4]
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8003dae:	f7fc fa17 	bl	80001e0 <__aeabi_dsub>
 8003db2:	ad4a      	add	r5, sp, #296	@ 0x128
 8003db4:	2401      	movs	r4, #1
 8003db6:	45a0      	cmp	r8, r4
 8003db8:	da2b      	bge.n	8003e12 <__kernel_rem_pio2+0x5e2>
 8003dba:	f1b9 0f00 	cmp.w	r9, #0
 8003dbe:	d002      	beq.n	8003dc6 <__kernel_rem_pio2+0x596>
 8003dc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	9b04      	ldr	r3, [sp, #16]
 8003dc8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003dcc:	e7a1      	b.n	8003d12 <__kernel_rem_pio2+0x4e2>
 8003dce:	9c05      	ldr	r4, [sp, #20]
 8003dd0:	ab48      	add	r3, sp, #288	@ 0x120
 8003dd2:	441c      	add	r4, r3
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f1b8 0f00 	cmp.w	r8, #0
 8003ddc:	da09      	bge.n	8003df2 <__kernel_rem_pio2+0x5c2>
 8003dde:	f1b9 0f00 	cmp.w	r9, #0
 8003de2:	d002      	beq.n	8003dea <__kernel_rem_pio2+0x5ba>
 8003de4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003de8:	4619      	mov	r1, r3
 8003dea:	9b04      	ldr	r3, [sp, #16]
 8003dec:	e9c3 0100 	strd	r0, r1, [r3]
 8003df0:	e78f      	b.n	8003d12 <__kernel_rem_pio2+0x4e2>
 8003df2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003df6:	f7fc f9f5 	bl	80001e4 <__adddf3>
 8003dfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8003dfe:	e7eb      	b.n	8003dd8 <__kernel_rem_pio2+0x5a8>
 8003e00:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003e04:	f7fc f9ee 	bl	80001e4 <__adddf3>
 8003e08:	3c01      	subs	r4, #1
 8003e0a:	e7c1      	b.n	8003d90 <__kernel_rem_pio2+0x560>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	e7c6      	b.n	8003da0 <__kernel_rem_pio2+0x570>
 8003e12:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8003e16:	f7fc f9e5 	bl	80001e4 <__adddf3>
 8003e1a:	3401      	adds	r4, #1
 8003e1c:	e7cb      	b.n	8003db6 <__kernel_rem_pio2+0x586>
 8003e1e:	ed95 7b00 	vldr	d7, [r5]
 8003e22:	ed8d 7b00 	vstr	d7, [sp]
 8003e26:	ed95 7b02 	vldr	d7, [r5, #8]
 8003e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e2e:	ec53 2b17 	vmov	r2, r3, d7
 8003e32:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003e36:	f7fc f9d5 	bl	80001e4 <__adddf3>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4606      	mov	r6, r0
 8003e40:	460f      	mov	r7, r1
 8003e42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e46:	f7fc f9cb 	bl	80001e0 <__aeabi_dsub>
 8003e4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e4e:	f7fc f9c9 	bl	80001e4 <__adddf3>
 8003e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e56:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8003e5a:	e9c5 6700 	strd	r6, r7, [r5]
 8003e5e:	e76d      	b.n	8003d3c <__kernel_rem_pio2+0x50c>
 8003e60:	ed94 7b00 	vldr	d7, [r4]
 8003e64:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8003e68:	ec51 0b17 	vmov	r0, r1, d7
 8003e6c:	4652      	mov	r2, sl
 8003e6e:	465b      	mov	r3, fp
 8003e70:	ed8d 7b00 	vstr	d7, [sp]
 8003e74:	f7fc f9b6 	bl	80001e4 <__adddf3>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	460f      	mov	r7, r1
 8003e80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e84:	f7fc f9ac 	bl	80001e0 <__aeabi_dsub>
 8003e88:	4652      	mov	r2, sl
 8003e8a:	465b      	mov	r3, fp
 8003e8c:	f7fc f9aa 	bl	80001e4 <__adddf3>
 8003e90:	3d01      	subs	r5, #1
 8003e92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003e96:	e9c4 6700 	strd	r6, r7, [r4]
 8003e9a:	e755      	b.n	8003d48 <__kernel_rem_pio2+0x518>
 8003e9c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003ea0:	f7fc f9a0 	bl	80001e4 <__adddf3>
 8003ea4:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ea8:	e758      	b.n	8003d5c <__kernel_rem_pio2+0x52c>
 8003eaa:	bf00      	nop
 8003eac:	f3af 8000 	nop.w
	...
 8003eb8:	41700000 	.word	0x41700000
 8003ebc:	3e700000 	.word	0x3e700000
 8003ec0:	9b04      	ldr	r3, [sp, #16]
 8003ec2:	9a04      	ldr	r2, [sp, #16]
 8003ec4:	601f      	str	r7, [r3, #0]
 8003ec6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8003eca:	605c      	str	r4, [r3, #4]
 8003ecc:	609d      	str	r5, [r3, #8]
 8003ece:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003ed2:	60d3      	str	r3, [r2, #12]
 8003ed4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003ed8:	6110      	str	r0, [r2, #16]
 8003eda:	6153      	str	r3, [r2, #20]
 8003edc:	e719      	b.n	8003d12 <__kernel_rem_pio2+0x4e2>
 8003ede:	bf00      	nop

08003ee0 <scalbn>:
 8003ee0:	b570      	push	{r4, r5, r6, lr}
 8003ee2:	ec55 4b10 	vmov	r4, r5, d0
 8003ee6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8003eea:	4606      	mov	r6, r0
 8003eec:	462b      	mov	r3, r5
 8003eee:	b991      	cbnz	r1, 8003f16 <scalbn+0x36>
 8003ef0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003ef4:	4323      	orrs	r3, r4
 8003ef6:	d03d      	beq.n	8003f74 <scalbn+0x94>
 8003ef8:	4b35      	ldr	r3, [pc, #212]	@ (8003fd0 <scalbn+0xf0>)
 8003efa:	4620      	mov	r0, r4
 8003efc:	4629      	mov	r1, r5
 8003efe:	2200      	movs	r2, #0
 8003f00:	f7fc fb26 	bl	8000550 <__aeabi_dmul>
 8003f04:	4b33      	ldr	r3, [pc, #204]	@ (8003fd4 <scalbn+0xf4>)
 8003f06:	429e      	cmp	r6, r3
 8003f08:	4604      	mov	r4, r0
 8003f0a:	460d      	mov	r5, r1
 8003f0c:	da0f      	bge.n	8003f2e <scalbn+0x4e>
 8003f0e:	a328      	add	r3, pc, #160	@ (adr r3, 8003fb0 <scalbn+0xd0>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	e01e      	b.n	8003f54 <scalbn+0x74>
 8003f16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003f1a:	4291      	cmp	r1, r2
 8003f1c:	d10b      	bne.n	8003f36 <scalbn+0x56>
 8003f1e:	4622      	mov	r2, r4
 8003f20:	4620      	mov	r0, r4
 8003f22:	4629      	mov	r1, r5
 8003f24:	f7fc f95e 	bl	80001e4 <__adddf3>
 8003f28:	4604      	mov	r4, r0
 8003f2a:	460d      	mov	r5, r1
 8003f2c:	e022      	b.n	8003f74 <scalbn+0x94>
 8003f2e:	460b      	mov	r3, r1
 8003f30:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003f34:	3936      	subs	r1, #54	@ 0x36
 8003f36:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003f3a:	4296      	cmp	r6, r2
 8003f3c:	dd0d      	ble.n	8003f5a <scalbn+0x7a>
 8003f3e:	2d00      	cmp	r5, #0
 8003f40:	a11d      	add	r1, pc, #116	@ (adr r1, 8003fb8 <scalbn+0xd8>)
 8003f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f46:	da02      	bge.n	8003f4e <scalbn+0x6e>
 8003f48:	a11d      	add	r1, pc, #116	@ (adr r1, 8003fc0 <scalbn+0xe0>)
 8003f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f4e:	a31a      	add	r3, pc, #104	@ (adr r3, 8003fb8 <scalbn+0xd8>)
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f7fc fafc 	bl	8000550 <__aeabi_dmul>
 8003f58:	e7e6      	b.n	8003f28 <scalbn+0x48>
 8003f5a:	1872      	adds	r2, r6, r1
 8003f5c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8003f60:	428a      	cmp	r2, r1
 8003f62:	dcec      	bgt.n	8003f3e <scalbn+0x5e>
 8003f64:	2a00      	cmp	r2, #0
 8003f66:	dd08      	ble.n	8003f7a <scalbn+0x9a>
 8003f68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003f6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003f70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003f74:	ec45 4b10 	vmov	d0, r4, r5
 8003f78:	bd70      	pop	{r4, r5, r6, pc}
 8003f7a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8003f7e:	da08      	bge.n	8003f92 <scalbn+0xb2>
 8003f80:	2d00      	cmp	r5, #0
 8003f82:	a10b      	add	r1, pc, #44	@ (adr r1, 8003fb0 <scalbn+0xd0>)
 8003f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f88:	dac1      	bge.n	8003f0e <scalbn+0x2e>
 8003f8a:	a10f      	add	r1, pc, #60	@ (adr r1, 8003fc8 <scalbn+0xe8>)
 8003f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f90:	e7bd      	b.n	8003f0e <scalbn+0x2e>
 8003f92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003f96:	3236      	adds	r2, #54	@ 0x36
 8003f98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003f9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd8 <scalbn+0xf8>)
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	e7d4      	b.n	8003f54 <scalbn+0x74>
 8003faa:	bf00      	nop
 8003fac:	f3af 8000 	nop.w
 8003fb0:	c2f8f359 	.word	0xc2f8f359
 8003fb4:	01a56e1f 	.word	0x01a56e1f
 8003fb8:	8800759c 	.word	0x8800759c
 8003fbc:	7e37e43c 	.word	0x7e37e43c
 8003fc0:	8800759c 	.word	0x8800759c
 8003fc4:	fe37e43c 	.word	0xfe37e43c
 8003fc8:	c2f8f359 	.word	0xc2f8f359
 8003fcc:	81a56e1f 	.word	0x81a56e1f
 8003fd0:	43500000 	.word	0x43500000
 8003fd4:	ffff3cb0 	.word	0xffff3cb0
 8003fd8:	3c900000 	.word	0x3c900000
 8003fdc:	00000000 	.word	0x00000000

08003fe0 <floor>:
 8003fe0:	ec51 0b10 	vmov	r0, r1, d0
 8003fe4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8003ff0:	2e13      	cmp	r6, #19
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	4680      	mov	r8, r0
 8003ff8:	dc34      	bgt.n	8004064 <floor+0x84>
 8003ffa:	2e00      	cmp	r6, #0
 8003ffc:	da17      	bge.n	800402e <floor+0x4e>
 8003ffe:	a332      	add	r3, pc, #200	@ (adr r3, 80040c8 <floor+0xe8>)
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f7fc f8ee 	bl	80001e4 <__adddf3>
 8004008:	2200      	movs	r2, #0
 800400a:	2300      	movs	r3, #0
 800400c:	f7fc fd30 	bl	8000a70 <__aeabi_dcmpgt>
 8004010:	b150      	cbz	r0, 8004028 <floor+0x48>
 8004012:	2c00      	cmp	r4, #0
 8004014:	da55      	bge.n	80040c2 <floor+0xe2>
 8004016:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800401a:	432c      	orrs	r4, r5
 800401c:	2500      	movs	r5, #0
 800401e:	42ac      	cmp	r4, r5
 8004020:	4c2b      	ldr	r4, [pc, #172]	@ (80040d0 <floor+0xf0>)
 8004022:	bf08      	it	eq
 8004024:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004028:	4621      	mov	r1, r4
 800402a:	4628      	mov	r0, r5
 800402c:	e023      	b.n	8004076 <floor+0x96>
 800402e:	4f29      	ldr	r7, [pc, #164]	@ (80040d4 <floor+0xf4>)
 8004030:	4137      	asrs	r7, r6
 8004032:	ea01 0307 	and.w	r3, r1, r7
 8004036:	4303      	orrs	r3, r0
 8004038:	d01d      	beq.n	8004076 <floor+0x96>
 800403a:	a323      	add	r3, pc, #140	@ (adr r3, 80040c8 <floor+0xe8>)
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f7fc f8d0 	bl	80001e4 <__adddf3>
 8004044:	2200      	movs	r2, #0
 8004046:	2300      	movs	r3, #0
 8004048:	f7fc fd12 	bl	8000a70 <__aeabi_dcmpgt>
 800404c:	2800      	cmp	r0, #0
 800404e:	d0eb      	beq.n	8004028 <floor+0x48>
 8004050:	2c00      	cmp	r4, #0
 8004052:	bfbe      	ittt	lt
 8004054:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004058:	4133      	asrlt	r3, r6
 800405a:	18e4      	addlt	r4, r4, r3
 800405c:	ea24 0407 	bic.w	r4, r4, r7
 8004060:	2500      	movs	r5, #0
 8004062:	e7e1      	b.n	8004028 <floor+0x48>
 8004064:	2e33      	cmp	r6, #51	@ 0x33
 8004066:	dd0a      	ble.n	800407e <floor+0x9e>
 8004068:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800406c:	d103      	bne.n	8004076 <floor+0x96>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	f7fc f8b7 	bl	80001e4 <__adddf3>
 8004076:	ec41 0b10 	vmov	d0, r0, r1
 800407a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004082:	f04f 37ff 	mov.w	r7, #4294967295
 8004086:	40df      	lsrs	r7, r3
 8004088:	4207      	tst	r7, r0
 800408a:	d0f4      	beq.n	8004076 <floor+0x96>
 800408c:	a30e      	add	r3, pc, #56	@ (adr r3, 80040c8 <floor+0xe8>)
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f7fc f8a7 	bl	80001e4 <__adddf3>
 8004096:	2200      	movs	r2, #0
 8004098:	2300      	movs	r3, #0
 800409a:	f7fc fce9 	bl	8000a70 <__aeabi_dcmpgt>
 800409e:	2800      	cmp	r0, #0
 80040a0:	d0c2      	beq.n	8004028 <floor+0x48>
 80040a2:	2c00      	cmp	r4, #0
 80040a4:	da0a      	bge.n	80040bc <floor+0xdc>
 80040a6:	2e14      	cmp	r6, #20
 80040a8:	d101      	bne.n	80040ae <floor+0xce>
 80040aa:	3401      	adds	r4, #1
 80040ac:	e006      	b.n	80040bc <floor+0xdc>
 80040ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80040b2:	2301      	movs	r3, #1
 80040b4:	40b3      	lsls	r3, r6
 80040b6:	441d      	add	r5, r3
 80040b8:	4545      	cmp	r5, r8
 80040ba:	d3f6      	bcc.n	80040aa <floor+0xca>
 80040bc:	ea25 0507 	bic.w	r5, r5, r7
 80040c0:	e7b2      	b.n	8004028 <floor+0x48>
 80040c2:	2500      	movs	r5, #0
 80040c4:	462c      	mov	r4, r5
 80040c6:	e7af      	b.n	8004028 <floor+0x48>
 80040c8:	8800759c 	.word	0x8800759c
 80040cc:	7e37e43c 	.word	0x7e37e43c
 80040d0:	bff00000 	.word	0xbff00000
 80040d4:	000fffff 	.word	0x000fffff

080040d8 <_init>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr

080040e4 <_fini>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	bf00      	nop
 80040e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ea:	bc08      	pop	{r3}
 80040ec:	469e      	mov	lr, r3
 80040ee:	4770      	bx	lr
